<?php 
require_once('../Connections/Assessment.php');
require_once("../WADbSearch/HelperPHP.php"); 
require_once( "../WA_SecurityAssist/Helper_PHP.php" ); 
include_once ("../includes/dts_functions.php");
include('report_custom_functions.php');

mysql_select_db($database_Assessment, $Assessment);

// Rather than having the user choose an instrument ID, the instrument ID is selected for them based on the instrument_id of the record selecetd. See the first recordset, below.


// 						SET COMMONLY USED PAGE VARIABLES

$userkey = -1;
if (isset($_SESSION['log_userkey'])) { $userkey = $_SESSION['log_userkey']; }

// $lakey IS NOT defined here. It is defined when the user is given authorization to view the report.

$mode = "";
if (isset($_GET['mode'])) { $mode = $_GET['mode']; }
if ($mode >= 1) { $mode = "checkreport"; }
$coder = 0;
if (isset($_GET['coder'])) { $coder = $_GET['coder']; }
$scorer = 0;
if (isset($_GET['scorer_no'])) { $scorer = $_GET['scorer_no']; }

$printable = false;
if (isset($_GET['printerv']) AND $_GET['printerv'] == "yes") { $printable = true; }


// Whitelist access to the score and code tables. This ensures that coders are always only shown the report data that they are responsible for, and also ensures that journal reports omit score-based content.
$code_table = "";
if ($coder > 1) { // fetch from the right codes table
$code_table = "la_codes_".$coder;
} else {
$code_table = "la_codes";
}

$sql_lacodeskey = "";
if (isset($_GET['lacodeskey'])) { 
	$sql_lacodeskey = sprintf(" AND lacodeskey = %s ", SQLstr($_GET['lacodeskey'])); 
}  


// $lasnumber = 0 is one way of indicating that there is no score. If a valid score exists, this number will be changed when the la_scores query happens.
$lasnumber_1 = 0;


//								DECLARING REPORT TAB / SECTION COMPATIBILITY

// Each tab has a declaration which lists all the instrument_ids for which it exists.
// (checks for $instrument_id_base, not the literal instrument_id.)
// If the tab requires a score, specify "SCORE". If the tab requires that the user be a manager, specify "MANAGER".

$module['about'] = " LDMA LMBE LSUA LRJA LLRA LERA LDPA LIMA SMA SMS SMJ ";	
$module['mistakes'] = " LDMA LSUA LMBE ";
$module['ldma_reasoning'] = " LDMA SCORE ";
$module['lsua_reasoning'] = " LSUA SCORE ";
$module['ldma_strengths'] = " LDMA SCORE ";	
$module['strengths_written'] = " LMBE FOLA ";
$module['lsua_strengths'] = " LSUA ";
$module['llra_qualities'] = " LLRA ";
$module['llra_themes'] = 		" LLRA ";
$module['lrja_themes'] = 		" LRJA ";
$module['lera_themes'] = 		" LERA ";
$module['ldpa_themes'] = 		" LDPA ";
$module['lima_themes'] = 		" LIMA ";
$module['lera_moralemotions'] = 		" LERA CHECKREPORT ";
$module['ldma_reasoning_phase'] = " NONE SCORE "; // disabling, redundant tab.
$module['lsua_reasoning_rel_phase'] = " LSUA SCORE ";
$module['lsua_reasoning_self_phase'] = " LSUA SCORE ";
$module['suggestions_ldma'] = " LDMA SCORE "; 
$module['suggestions_lsua'] = " LSUA SCORE "; 
$module['argumentation'] = " LDMA LMBE FOLA LLRA LRJA LERA LDPA LIMA SMA SMJ C_ARG ";
$module['perspectives'] = " LDMA CODED ";
$module['context'] = " LDMA CODED ";
$module['decision_making'] = " LDMA CODED ";
$module['summary_ldma'] = " LDMA CODED ";
$module['implicit_explicit'] = " LDMA LMBE ";
$module['levels_tasks'] = " NONE SCORE MANAGER "; // disabled for indiv report
$module['management'] = " NONE SCORE MANAGER ";
$module['lsua_survey'] = " LSUA ";
$module['sma_themes'] = " SMA ";
$module['sms_score'] = " SMS ";
$module['smj_scores'] = " SMJ "; // a SCORES tab, and a COMMENTS tab (same module)
$module['essays'] = " LDMA LSUA LLRA LRJA LERA LIMA LDPA LMBE SMA SMJ ";

// checkModule() is called for each tab (once for each tab and once for each panel).

function checkModule($moduleName) {
	global $module, $instrument_id_base, $row_rsRegistrants, 
		$lasnumber_1, $type, $mode, $codes;
	$tabQualifies = FALSE;
	$requirements = $module[$moduleName];	// look up the requirements for this report module
	// check if the instrument_id is valid
	if (strpos($requirements, $instrument_id_base) OR strpos($requirements, "ALL")) { 
		$tabQualifies = TRUE; 
	} else { 
		return FALSE; 
	}
	// check if the tab requires a manager status to show
	if (strpos($requirements, "MANAGER")) {
		if ($row_rsRegistrants['manlevelkey'] > 0) { $tabQualifies = TRUE; }
		else { return FALSE; }
	}
	if (strpos($requirements, "CHECKREPORT")) { 
		if ($mode == "checkreport") { $tabQualifies = TRUE; }
		else { return FALSE; }
	}
	// check if the tab requires a valid score
	if (strpos($requirements, "SCORE")) {
		if ($type <> "journal") { $tabQualifies = TRUE; }
		else { return FALSE; }
	}
	// check if the tab requires that the record have been coded
	if (strpos($requirements, "CODED")) {
		if ($codes['coded_1'] > 0) { $tabQualifies = TRUE; }
		else { return FALSE; }
	}
	
	if (strpos($requirements, "C_ARG")) {
		if ($codes['coded_arg_1'] > 0 OR $instrument_id_base == "SMJ") { $tabQualifies = TRUE; }
		else { return FALSE; }
	}
	return $tabQualifies;
}








//															RECORDSETS

// Registrant and general test taker data for this performance

$query_rsRegistrants = sprintf("SELECT r.userkey, r.firstname, r.lastname, d.lakey, d.resellerkey, 
		d.instrument_id, d.bc_allowedtoview, d.finalized, d.test_time, d.manlevelkey, 
		dem.man_level_number, dem.man_level_title, dem.man_level, dem.man_level_comment
	FROM la_data d
		JOIN registrants r ON d.userkey = r.userkey 
		LEFT JOIN demogs_man_level dem ON d.manlevelkey = dem.manlevelkey
	WHERE d.lakey = %s ", SQLstr($_GET['lakey'], "int"));
$rsRegistrants = mysql_query($query_rsRegistrants, $Assessment) or die("rsRegistrants: ".mysql_error());
$row_rsRegistrants = mysql_fetch_assoc($rsRegistrants);
$totalRows_rsRegistrants = mysql_num_rows($rsRegistrants);

// Give error message if that lakey isn't found.
if ($totalRows_rsRegistrants == 0) {
die("Error: could not find any records with that record number. Please use the BACK button to return to the previous page, or contact us for help: \n <a href=\"https://www.devtestservice.org/contactus.php\">contact us</a>");
}




// Set the instrument_id based on the record, and make $_SESSION follow suit.
$instrument_id = $row_rsRegistrants['instrument_id'];
$instrument_id_name = str_replace("_", " ", $instrument_id);
$instrument_id_base = str_replace("_JOURNAL", "", $instrument_id);
if ($instrument_id <> $_SESSION['instrument_id']) { $_SESSION['instrument_id'] = $instrument_id; }
$type = "";
if (strpos($instrument_id, "JOURNAL")) { $type = "journal"; } 
else if ($instrument_id == "SMA") { $type = "journal"; }
else if ($instrument_id == "SMJ") { $type = "journal"; }
else if ($instrument_id == "SMS") { $type = "journal"; }
else { $type = "test"; }

$filter_instrument_id = " AND (d.instrument_id = ".
	SQLstr($instrument_id_base, "text").
	" OR d.instrument_id = ".
	SQLstr($instrument_id_base."_JOURNAL", "text").") ";





/** 												RESTRICT USER ACCESS 
	using a key technique to avoid any slip-throughs: if you don't qualify,
	you aren't given the lakey for the record. **/

$allowed_to_view = "no";
$lakey = -1;
$is_client = false; // assumes you're the test taker

// if the logged-in user owns this performance, and it has been finalized, let them view.
if ($row_rsRegistrants['userkey'] == $_SESSION['log_userkey'] AND 
	$row_rsRegistrants['finalized'] == 1) {
	$allowed_to_view = "yes";
	$is_client = false;
}
// If the logged-in user is project administrator for the owner of this performance, 
// AND if the test taker gives their consent, then let them view.
if ($row_rsRegistrants['resellerkey'] == $_SESSION['log_userkey']) {
if ($row_rsRegistrants['bc_allowedtoview'] <> 0 OR
		is_null($row_rsRegistrants['bc_allowedtoview'])) {
	$allowed_to_view = "yes";
	$is_client = true;
} 
}
// If the logged-in user is a DTS employee, let them view.
if (WA_Auth_RulePasses("Logged in as intern")) {
	$allowed_to_view = "yes";
	$is_client = true;
}
// If the logged-in user is a teacher assistant, let them view any SMA and SMJ records.
if (WA_Auth_RulePasses("Logged in as teacher assistant") AND 
		($instrument_id == "SMA" OR $instrument_id == "SMJ")) {
	$allowed_to_view = "yes";
	$is_client = true;
}

// If they're not allowed to view by now, boot them out.
if ($allowed_to_view == "yes") {
	$lakey = $row_rsRegistrants['lakey'];
} else {
	WA_Auth_RestrictAccess("../security/logIn.php?reason=privatereport");
}





// Essay, dilemma, probe, and menu selection information

$query_rsEssays = sprintf("SELECT d.timestamp, d.date_completed, 
d.probe01, d.probe02, d.probe03, d.probe04, d.probe05, d.probe06, d.probe07, 
d.dilemmakey, di.dilemma_name, di.dilemma, 
p1.probe_description AS probe_desc01, p1.probe_name AS probe_name01, 
p2.probe_description AS probe_desc02, p2.probe_name AS probe_name02, 
p3.probe_description AS probe_desc03, p3.probe_name AS probe_name03, 
p4.probe_description AS probe_desc04, p4.probe_name AS probe_name04, 
p5.probe_description AS probe_desc05, p5.probe_name AS probe_name05, 
p6.probe_description AS probe_desc06, p6.probe_name AS probe_name06, 
p7.probe_description AS probe_desc07, p7.probe_name AS probe_name07, 
m1.menu_item AS menu01, m2.menu_item AS menu02, m3.menu_item AS menu03, m4.menu_item AS menu04, m5.menu_item AS menu05, m6.menu_item AS menu06, m7.menu_item AS menu07
FROM la_data d 
LEFT JOIN la_dilemmas di ON d.dilemmakey = di.dilemmakey
LEFT JOIN la_probes p1 ON p1.instrument_id = %s AND p1.probe_number = '01' 
LEFT JOIN la_probes p2 ON p2.instrument_id = %s AND p2.probe_number = '02' 
LEFT JOIN la_probes p3 ON p3.instrument_id = %s AND p3.probe_number = '03' 
LEFT JOIN la_probes p4 ON p4.instrument_id = %s AND p4.probe_number = '04' 
LEFT JOIN la_probes p5 ON p5.instrument_id = %s AND p5.probe_number = '05' 
LEFT JOIN la_probes p6 ON p6.instrument_id = %s AND p6.probe_number = '06' 
LEFT JOIN la_probes p7 ON p7.instrument_id = %s AND p7.probe_number = '07' 
LEFT JOIN la_menus m1 ON d.choicekey01 = m1.menukey 
LEFT JOIN la_menus m2 ON d.choicekey02 = m2.menukey 
LEFT JOIN la_menus m3 ON d.choicekey03 = m3.menukey 
LEFT JOIN la_menus m4 ON d.choicekey04 = m4.menukey 
LEFT JOIN la_menus m5 ON d.choicekey05 = m5.menukey 
LEFT JOIN la_menus m6 ON d.choicekey06 = m6.menukey 
LEFT JOIN la_menus m7 ON d.choicekey07 = m7.menukey 
WHERE d.lakey = %s", 
	SQLstr($instrument_id_base, "text"),
	SQLstr($instrument_id_base, "text"),
	SQLstr($instrument_id_base, "text"),
	SQLstr($instrument_id_base, "text"),
	SQLstr($instrument_id_base, "text"),
	SQLstr($instrument_id_base, "text"),
	SQLstr($instrument_id_base, "text"),
	SQLstr($lakey, "int"));
$rsEssays = mysql_query($query_rsEssays, $Assessment) or die("rsEssays: ".mysql_error());
$row_rsEssays = mysql_fetch_assoc($rsEssays);
$totalRows_rsEssays = mysql_num_rows($rsEssays);

$sql_rsSurvey = sprintf("SELECT * FROM la_survey_data d WHERE d.lakey = %s", 
	SQLstr($lakey, "int"));
$rsSurvey = mysql_query($sql_rsSurvey) or die("rsSurvey: ".mysql_error());
$row_rsSurvey = mysql_fetch_assoc($rsSurvey);






// Boilerplate table allows us to pull template text into various parts of the report.
// It's more efficient, now, to download the whole table and put each boilerplate item into a slot in an array, which I call using the boilerplate column "name".
$rsLaBoilerplate = mysql_query("SELECT b.* FROM la_boilerplate b WHERE type = 'indiv_report' ", $Assessment) 
	or die("rsLaBoilerplate: ".mysql_error());
$boilerplate = array();
while ($row = mysql_fetch_assoc($rsLaBoilerplate)) {
	$boilerplate[$row['name']] = linknewtab($row['la_boilerplate_text']);
}

// Is this the "imported" version of an old assessment? If can find the same lakey in one of the old tables, show a box with a link back. 
// **** This requires that the lakey be the same as the ldmakey or whatever. Obviously this is not sustainable for an indefinite number of records; but there's a very limited number of old assessments that we'll have to import (and we may already have imported all of the ones we need) so I'm OK with leaving this a very informal set-up. 
$old_tables = " ldma lera lrja lsua lmbe lima ";
$old_imported = false;
if (strpos($old_tables, strtolower($instrument_id_base))) {
	$sql_old = sprintf("SELECT * FROM %s WHERE %skey = %s ",
			strtolower($instrument_id_base),
			strtolower($instrument_id_base),
			SQLstr($lakey, "int"));
	$rsOld = mysql_query($sql_old) or error_log("", 1, "service@lectica.org");
	if (mysql_num_rows($rsOld) > 0) { $old_imported = true; }
}


// Fetch information on the FOLA course, if relevant
if ($instrument_id_base == "FOLA") { 
	$query_rsFolaAssn = sprintf("SELECT c.*, cd.*, cr.taken_at_level
	FROM courses_old c
	JOIN course_dates_old cd ON c.coursekey = cd.coursekey 
											 AND NOW() BETWEEN cd.course_start_date AND cd.course_end_date
	JOIN course_registration_old cr ON cd.coursedatekey = cr.coursedatekey 
	WHERE c.coursekey = 101 AND cr.userkey = %s ",
			SQLstr($row_rsRegistrants['userkey'], "int"));
	$rsFolaAssn = mysql_query($query_rsFolaAssn, $Assessment) or die(mysql_error());
	$row_rsFolaAssn = mysql_fetch_assoc($rsFolaAssn);
	$totalRows_rsFolaAssn = mysql_num_rows($rsFolaAssn);
}


// Preparing FOLA course assignment information, if relevant

$courseAssnTitle = "";
$courseAssn = "";

if (isset($totalRows_rsFolaAssn) AND $totalRows_rsFolaAssn > 0) {
// Figure out which assignment this is, based on deadlines
$i = 1; $i_pad = str_pad($i, 2, '0', STR_PAD_LEFT);
while ($row_rsEssays['timestamp'] > $row_rsFolaAssn['discussion'.$i_pad.'_date']) {
	$i ++; $i_pad = str_pad($i, 2, '0', STR_PAD_LEFT);
}
$courseAssnNumber = $i_pad;
$courseAssnLevel = $row_rsFolaAssn['taken_at_level'];
$courseAssn = $row_rsFolaAssn['class'.$i_pad.'_assignment_level'.$courseAssnLevel];
$courseAssnDueDate = $row_rsFolaAssn['assignment'.$i_pad.'_date'];
$courseAssn = str_replace("[DATE]", $courseAssnDueDate, $courseAssn);
$courseAssnTitle = $row_rsFolaAssn['class'.$i_pad.'_tab_label'];

// count # of probes to this question
$col = 'class'.$i_pad.'_assignment_level'.$courseAssnLevel.'_probe';
$numProbes = 1;
$i = 1;
while (isset($row_rsFolaAssn[$col.($i)]) AND $row_rsFolaAssn[$col.($i)] <> "") 
{ $courseAssnProbe[$i] = $row_rsFolaAssn[$col.($i)]; $i ++; }
}









// All basic codes data for this performance
$query_rsLaCodes = sprintf("SELECT c.*, d.coded_1, d.coded_2, d.coded_3, di.weighting, 
		d.coded_arg_1, d.coded_arg_2, d.coded_arg_3, 
		m_spec.comment AS special_comment_text
	FROM {$code_table} c
		JOIN la_data d ON c.lakey = d.lakey
		LEFT JOIN la_menus m_spec ON c.special_comment = m_spec.menukey
		LEFT JOIN la_dilemmas di ON d.dilemmakey = di.dilemmakey
	WHERE c.lakey = %s {$sql_lacodeskey}", 
		SQLstr($lakey, "int"));
$rsLaCodes = mysql_query($query_rsLaCodes) or die("rsLaCodes: ".mysql_error());
$codes = mysql_fetch_assoc($rsLaCodes);

// Basic score data (which happens to be just the average score)
$query_rsLaScoreData = sprintf("SELECT s.lasnumber_1
FROM la_data d 
LEFT JOIN la_scores s ON d.lakey = s.lakey
WHERE d.lakey = %s", SQLstr($lakey, "int"));
$rsLaScoreData = mysql_query($query_rsLaScoreData) or die("rsLaScoreData: ".mysql_error());
$row_rsLaScoreData = mysql_fetch_assoc($rsLaScoreData);
// Commit the score to $lasnumber as a general page variable - ONLY if the conditions for a score-containing report are met.
if ( $row_rsLaScoreData['lasnumber_1'] > 0 AND $type <> "journal") {
	$lasnumber_1 = round($row_rsLaScoreData['lasnumber_1'], 1);
	if (substr_count($lasnumber_1, ".") == 0) { $lasnumber_1 .= ".0"; }
}





// All perspective-related data, based on code data. Only show if the perspective tab should exist.
if (checkModule('perspectives')) {

	// Get the list of perspectives valid for this dilemma
	$dilemma_pad = str_pad($row_rsEssays['dilemmakey'], 2, '0', STR_PAD_LEFT);
	$query_rsPerspectives = "SELECT perspective, dilemma_{$dilemma_pad} AS impl_expl, code_ptaken, code_psought FROM la_ldma_perspectives WHERE dilemma_{$dilemma_pad} >= '1'";
	$rsPerspectives = mysql_query($query_rsPerspectives, $Assessment) or die("ERROR finding the dilemmas and perspectives information for this page. ".mysql_error());
	$perspective = mysql_fetch_assoc($rsPerspectives);
	
	// Get the COUNT of valid explicit, and valid implicit, perspectives for this dilemma.
	$query_rsPerspectiveCounts = "SELECT 
	COUNT(expl.perspective) AS explicit, 
	COUNT(impl.perspective) As implicit
	FROM la_ldma_perspectives p
	LEFT JOIN la_ldma_perspectives expl ON 
			p.perspective = expl.perspective AND expl.dilemma_{$dilemma_pad} = 1
	LEFT JOIN la_ldma_perspectives impl ON 
			p.perspective = impl.perspective AND impl.dilemma_{$dilemma_pad} = 2";
	$rsPerspectiveCounts = mysql_query($query_rsPerspectiveCounts, $Assessment) or die("rsPerspectiveCounts: ".mysql_error());
	$row_rsPerspectiveCounts = mysql_fetch_assoc($rsPerspectiveCounts);
	$totalRows_rsPerspectiveCounts = mysql_num_rows($rsPerspectiveCounts);
	
	// Perspectives by management level 
	$query_rsPerspManLevel = sprintf("SELECT 
	man_pt.man_level_number AS pt_man_level_number, man_pt.man_level_general_name AS pt_man_level_name, 
	man_ps.man_level_number AS ps_man_level_number, man_ps.man_level_general_name AS ps_man_level_name 
	FROM {$code_table} c
	LEFT JOIN demogs_man_level_general man_pt ON c.code451 
						BETWEEN man_pt.perspective_score_low AND man_pt.perspective_score_high
	LEFT JOIN demogs_man_level_general man_ps ON c.code452 
						BETWEEN man_ps.perspective_score_low AND man_ps.perspective_score_high
	WHERE c.lakey = %s {$sql_lacodeskey}", 
		SQLstr($lakey, "int"));
	$rsPerspManLevel = mysql_query($query_rsPerspManLevel, $Assessment) or die("rsPerspManLevel: ".mysql_error());
	$row_rsPerspManLevel = mysql_fetch_assoc($rsPerspManLevel);
	$totalRows_rsPerspManLevel = mysql_num_rows($rsPerspManLevel);
	
	//die($query_rsPerspManLevel);
}





// All argumentation-related data, based on code data
// This query is built not to break if data aren't present, so there's no need to check for Argumentation compatibility before running it. 
/* Argumentation_overall comments are selected out of the query by 1) argumentation quality mean, 2) the range of LAS score performance.  
The query does a very weird thing: basically the >= operator doesn't seem to work; it acts like a > operator, so the search will return empty for certain lasnumbers. A possible workaround is to make the >= condition act on a slightly lower number, (lasnumber_1-.01). */

$sql = sprintf("SELECT ao.quality AS overall_quality, 
	ao.implication AS overall_implication, 
	ao.argoverinfer AS overall_infer, av.vocabularycomment, 
	ae.coherenceenglishinfer AS english_infer, ae.implication AS english_implication
	FROM {$code_table} c 
	LEFT JOIN la_scores s ON c.lakey = s.lakey 
	LEFT JOIN la_argumentation_overall ao ON ROUND(c.argumentation_overall,0) = ao.arg_mean 
					AND ROUND(s.lasnumber_1, 1) BETWEEN ao.las_number_low AND ao.las_number_high 
	LEFT JOIN la_argumentation_vocabulary av ON c.argumentation_vocabulary = av.vocabularykey
	LEFT JOIN la_argumentation_english_infer ae ON ROUND(c.argumentation_english,0) = ae.coherencekey
					AND (1=1 OR s.lasnumber_1 BETWEEN ae.las_number_low AND ae.las_number_high) 
	WHERE c.lakey = %s {$sql_lacodeskey}", 
		SQLstr($lakey, "int"));
$rsArgumentation = mysql_query($sql) or die(mysql_error());
// echo $sql;
$row_rsArgumentation = mysql_fetch_assoc($rsArgumentation);

$sql = "SELECT * FROM la_argumentation";
$rsArgumentationAll = mysql_query($sql) or die("rsArgumentation: ".mysql_error());
$row_rsArgumentationAll = mysql_fetch_assoc($rsArgumentationAll);





// Strengths, weaknesses, and recommendations
// For some assessments, SWR will not be coded unless there is a score present. For others, it will not depend on score. For journal entries, SWR will not be coded. 

if (checkModule('ldma_strengths')) {

	$query_rsStrengths = sprintf("SELECT 
			cs1.position1phrasing AS cs1, cs2.position2phrasing AS cs2, cs3.position3phrasing AS cs3, 
			ps1.position1phrasing AS ps1, ps2.position2phrasing AS ps2, 
			r1.position1phrasing AS r1, r2.position2phrasing AS r2
		FROM {$code_table} c
			LEFT JOIN la_scores s ON c.lakey = s.lakey
			LEFT JOIN la_codes_strengths_current cs1 ON c.strength01 = cs1.currentstrengthkey
			LEFT JOIN la_codes_strengths_current cs2 ON c.strength02 = cs2.currentstrengthkey
			LEFT JOIN la_codes_strengths_current cs3 ON c.strength03 = cs3.currentstrengthkey
			LEFT JOIN la_codes_strengths_potential ps1 ON c.growth01 = ps1.potentialstrengthkey
			LEFT JOIN la_codes_strengths_potential ps2 ON c.growth02 = ps2.potentialstrengthkey
			LEFT JOIN la_codes_recommendations r1 ON c.recommend01 = r1.recommendkey
			LEFT JOIN la_codes_recommendations r2 ON c.recommend02 = r2.recommendkey
		WHERE c.lakey = %s {$sql_lacodeskey}", 
			SQLstr($lakey, "int"));
	$rsStrengths = mysql_query($query_rsStrengths, $Assessment) or die("rsStrengths: ".mysql_error());
	$row_rsStrengths = mysql_fetch_assoc($rsStrengths);
	$totalRows_rsStrengths = mysql_num_rows($rsStrengths);
} 
else if (checkModule('strengths_written')) {
	// check if strengths are in draft form and should be re-queried using just the position 1 column.
	$query_rsStrengths = sprintf("SELECT 
			cs1.position1phrasing AS cs1, cs2.position1phrasing AS cs2, cs3.position1phrasing AS cs3, 
			ps1.position1phrasing AS ps1, ps2.position1phrasing AS ps2, 
			r1.position1phrasing AS r1, r2.position1phrasing AS r2
		FROM {$code_table} c
			LEFT JOIN la_scores s ON c.lakey = s.lakey
			LEFT JOIN la_codes_strengths_current cs1 ON c.strength01 = cs1.currentstrengthkey
			LEFT JOIN la_codes_strengths_current cs2 ON c.strength02 = cs2.currentstrengthkey
			LEFT JOIN la_codes_strengths_current cs3 ON c.strength03 = cs3.currentstrengthkey
			LEFT JOIN la_codes_strengths_potential ps1 ON c.growth01 = ps1.potentialstrengthkey
			LEFT JOIN la_codes_strengths_potential ps2 ON c.growth02 = ps2.potentialstrengthkey
			LEFT JOIN la_codes_recommendations r1 ON c.recommend01 = r1.recommendkey
			LEFT JOIN la_codes_recommendations r2 ON c.recommend02 = r2.recommendkey
		WHERE c.lakey = %s {$sql_lacodeskey}", 
			SQLstr($lakey, "int"));
	$rsStrengths = mysql_query($query_rsStrengths, $Assessment) or die("rsStrengths(Written): ".mysql_error());
	$row_rsStrengths = mysql_fetch_assoc($rsStrengths);
	$totalRows_rsStrengths = mysql_num_rows($rsStrengths);
}

else if (checkModule('lsua_strengths')) {
	// For the LSUA checklists of strengths, all code-linked strengths are fetched, then we use lookup() in the page to find the right strengths to show on the report.
	
	$query_rsCurStr = sprintf("SELECT cs.code_number, cs.position1phrasing AS current_strength
	FROM la_codes_strengths_current cs 
	WHERE cs.instrument_id = %s AND cs.code_number > 0",
			SQLstr($instrument_id_base, "text")); 
	$rsCurStr = mysql_query($query_rsCurStr, $Assessment) or die("rsCurStr: ".mysql_error());
	//$row_rsCurStr = mysql_fetch_assoc($rsCurStr);
	$totalRows_rsCurStr = mysql_num_rows($rsCurStr);
	
	$query_rsPotStr = sprintf("SELECT ps.code_number, ps.position1phrasing AS potential_strength
	FROM la_codes_strengths_potential ps 
	WHERE ps.instrument_id = %s AND ps.code_number > 0",
			SQLstr($instrument_id_base, "text"));
	$rsPotStr = mysql_query($query_rsPotStr, $Assessment) or die("rsPotStr: ".mysql_error());
	//$row_rsPotStr = mysql_fetch_assoc($rsPotStr);
	$totalRows_rsPotStr = mysql_num_rows($rsPotStr);
	
	// The final strengths and recommendations (from pulldown menus): the code slots are hard-coded in here.
	$query_rsFinalStr = sprintf("SELECT sc.position3phrasing AS current_strength_final,
			sp.position2phrasing AS potential_strength_final, 
			r1.position1phrasing AS recommendation_01, 
			r2.position2phrasing AS recommendation_02
		FROM {$code_table} c
			LEFT JOIN la_codes_strengths_current sc ON c.code050 = sc.currentstrengthkey
			LEFT JOIN la_codes_strengths_potential sp ON c.code100 = sp.potentialstrengthkey
			LEFT JOIN la_codes_recommendations r1 ON c.code101 = r1.recommendkey
			LEFT JOIN la_codes_recommendations r2 ON c.code102 = r2.recommendkey
		WHERE c.lakey = %s {$sql_lacodeskey}", 
			SQLstr($lakey, "int"));
	$rsFinalStr = mysql_query($query_rsFinalStr, $Assessment) or die("rsFinalStr: ".mysql_error());
	$row_rsFinalStr = mysql_fetch_assoc($rsFinalStr);
	$totalRows_rsFinalStr = mysql_num_rows($rsFinalStr);
	
	//topher(" = ".$row_rsFinalStr['recommendation_01']);
	
	// This string will store the full tab content to display on the page.
	$tabtext_lsua_strengths = "";
	$text = "";
	
	// Current strengths
	$i = 1;
	$numCurStrengths = 0;
	if ($row_rsFinalStr['current_strength_final'] <> "") { $numCurStrengths ++; }
	$textCurStrengths = "";
	while ($i < 50) { 
		$i_pad = str_pad($i, 3, '0', STR_PAD_LEFT);
		if ($codes['code'.$i_pad] > 0) { 
			$textCurStrengths = str_replace(" and </li>", "</li>", $textCurStrengths);
			$textCurStrengths .= "<li>".
					lookup($rsCurStr, "code_number", $i, "current_strength")." and </li> ";
			$numCurStrengths ++;	// counts up how many current strengths were coded
		}
		$i ++;
	} 
	
	if ($numCurStrengths > 0) { 
		$text .= "<h3>Current strengths</h3>".
			"<p>".str_replace("[COUNT]", $numCurStrengths, $boilerplate['report_lsua_cs1'])."</p>".
			"<ul>".$textCurStrengths.
				// then end with the final cur strength, which is required.
				"<li>".$row_rsFinalStr['current_strength_final']."</li>".
			"</ul>";
	} 
	
	
	$i = 51;
	$numPotStrengths = 0;
	if ($row_rsFinalStr['potential_strength_final'] <> "") { $numPotStrengths ++; }
	$textPotStrengths = "";
	while ($i < 100) { 
		$i_pad = str_pad($i, 3, '0', STR_PAD_LEFT);
		if ($codes['code'.$i_pad] > 0) { 
			$textPotStrengths = str_replace(" and </li>", "</li>", $textPotStrengths);
			$textPotStrengths .= "<li>".
					lookup($rsPotStr, "code_number", $i, "potential_strength")." and </li> ";
			$numPotStrengths ++;
		}
		$i ++;
	} 
	
	if ($numPotStrengths > 0) { 
		$text .= "<h3>Potential strengths</h3>".
			"<p>".str_replace("[COUNT]", $numPotStrengths, $boilerplate['report_lsua_ps1'])."</p>". 
			"<ul>".$textPotStrengths.
				// then end with the final cur strength, which is required.
				"<li>".$row_rsFinalStr['potential_strength_final']."</li>".
			"</ul>";
	} 
	
	if ($row_rsFinalStr['recommendation_01'] <> "") { 
		$text .= "<h3>Recommendations for growth</h3>";
		// **** Not currently using boilerplate comments for the recommendations paragraph; 
		// the bp text is directly in the recommendations comments themselves. 
		$comment1 = $boilerplate['report_recom_lsua_intro'];
		$comment1_score = $boilerplate['report_recom_lsua_scorecomment'];
		if ($lasnumber_1 > 0) { // If a score is present,
			// then add the boilerplate section which mentions the score
			$comment1 = str_replace("[SCORECOMMENT]", $comment1_score, $comment1); 
			// and plug the score into that comment.
			$comment1 = str_replace("[SCORE]", $lasnumber_1, $comment1);
		} 
		else { $comment1 = str_replace("[SCORECOMMENT]", "", $comment1); } 
		
		$text .= "<p>{$comment1}</p>
			<ul><li>".$row_rsFinalStr['recommendation_01']."</li>";
		if ($row_rsFinalStr['recommendation_02'] <> "") {
			$text .= "<li>".$row_rsFinalStr['recommendation_02']."</li>";
		}
		$text .= "</ul>";
	} // END IF: show recomm. section if recommendations were coded 
	
	// If any content appears for this tab, then show the tab.
	if ($text <> "") { 
		$from_bp_row = "report_sr_intro_lsua";
		if ($instrument_id =='LSUA_JOURNAL') { $from_bp_row = "report_sr_intro_lsua_journal"; }
		$text = $boilerplate[$from_bp_row].$text."<p>&nbsp;</p>";
		$text = str_replace("[INSTRUMENT_ID]", $instrument_id_name, $text); 
		$text = str_replace("[SCORECOMMENT]", "", $text); 
		
		$tabtext_lsua_strengths = $text;
	}
	
	
	
}





// la_comments generic feedback text. 
// Most of this is selected by LAS number range; some of it is selected by other scale scores.
if ($instrument_id_base == "LDMA") {
	// rsLaLdmaComments
	$sql = sprintf("SELECT di.weighting, 
		
		com.ldma_growth_perspectives, com.ldma_growth_response, com.ldma_growth_process, 
		com.ldma_growth_org, com.ldma_intro_managers, com.ldma_las_general_description, 
		com.ldma_las_perspectives, com.ldma_las_response, com.ldma_las_process, 
		com.ldma_lesson1, com.ldma_lesson2, com.ldma_lesson3, com.ldma_lesson4, com.ldma_lesson5, 
		com.ldma_lesson6, com.ldma_lesson7, 
		
		com1.ldma_probe1, com2.ldma_probe2, com3.ldma_probe3, com4.ldma_probe4, com5.ldma_probe5,
		com1next.ldma_probe1 AS ldma_probe1_next, com2next.ldma_probe2 AS ldma_probe2_next, 
		com3next.ldma_probe3 AS ldma_probe3_next, com4next.ldma_probe4 AS ldma_probe4_next, 
		com5next.ldma_probe5 AS ldma_probe5_next, 
		
		cs_pc.comment_individual AS perspective_coordination,
		cs_ct.comment_individual AS contextual_thinking,
		cs_dm.comment_individual AS dm_process,
		cs_col.comment_individual AS collab_capacity,
		cs_pc_next.comment_individual AS perspective_coordination_next,
		cs_ct_next.comment_individual AS contextual_thinking_next,
		cs_dm_next.comment_individual AS dm_process_next,
		cs_col_next.comment_individual AS collab_capacity_next
		
		FROM la_data d
		LEFT JOIN {$code_table} c ON d.lakey = c.lakey
		LEFT JOIN la_scores s ON d.lakey = s.lakey
		LEFT JOIN la_dilemmas di ON d.dilemmakey = di.dilemmakey
		LEFT JOIN la_comments com ON s.lasnumber_1 BETWEEN com.las_number_low AND com.las_number_high
		LEFT JOIN la_comments com1 ON s.probe01las_1 BETWEEN com1.las_number_low AND com1.las_number_high
		LEFT JOIN la_comments com2 ON s.probe02las_1 BETWEEN com2.las_number_low AND com2.las_number_high
		LEFT JOIN la_comments com3 ON s.probe03las_1 BETWEEN com3.las_number_low AND com3.las_number_high
		LEFT JOIN la_comments com4 ON s.probe04las_1 BETWEEN com4.las_number_low AND com4.las_number_high
		LEFT JOIN la_comments com5 ON s.probe05las_1 BETWEEN com5.las_number_low AND com5.las_number_high
		LEFT JOIN la_comments com1next ON s.probe01las_1+0.25 BETWEEN com1next.las_number_low AND com1next.las_number_high
		LEFT JOIN la_comments com2next ON s.probe02las_1+0.25 BETWEEN com2next.las_number_low AND com2next.las_number_high
		LEFT JOIN la_comments com3next ON s.probe03las_1+0.25 BETWEEN com3next.las_number_low AND com3next.las_number_high
		LEFT JOIN la_comments com4next ON s.probe04las_1+0.25 BETWEEN com4next.las_number_low AND com4next.las_number_high
		LEFT JOIN la_comments com5next ON s.probe05las_1+0.25 BETWEEN com5next.las_number_low AND com5next.las_number_high
		
		LEFT JOIN la_comments_scales cs_pc ON cs_pc.scale_name = 'perspective coordination'
			AND ROUND(c.code453, 1) BETWEEN cs_pc.score_low AND cs_pc.score_high
		LEFT JOIN la_comments_scales cs_ct ON cs_ct.scale_name = 'contextual thinking'
			AND ROUND(c.code454, 1) BETWEEN cs_ct.score_low AND cs_ct.score_high
		LEFT JOIN la_comments_scales cs_dm ON cs_dm.scale_name = 'decision-making process'
			AND ROUND(c.code455, 1) BETWEEN cs_dm.score_low AND cs_dm.score_high
		LEFT JOIN la_comments_scales cs_col ON cs_col.scale_name = 'collaborative capacity'
			AND ROUND(c.code456, 1) BETWEEN cs_col.score_low AND cs_col.score_high
			
		LEFT JOIN la_comments_scales cs_pc_next ON cs_pc_next.scale_name = 'perspective coordination' 
			AND ROUND(c.code453 + 1.2, 1) BETWEEN cs_pc_next.score_low AND cs_pc_next.score_high
		LEFT JOIN la_comments_scales cs_ct_next ON cs_ct_next.scale_name = 'contextual thinking'
			AND ROUND(c.code454 + 1.4, 1) BETWEEN cs_ct_next.score_low AND cs_ct_next.score_high
		LEFT JOIN la_comments_scales cs_dm_next ON cs_dm_next.scale_name = 'decision-making process' 
			AND ROUND(c.code455 + 1.4, 1) BETWEEN cs_dm_next.score_low AND cs_dm_next.score_high
		LEFT JOIN la_comments_scales cs_col_next ON cs_col_next.scale_name = 'collaborative capacity' 
			AND ROUND(c.code456 + 1.2, 1) BETWEEN cs_col_next.score_low AND cs_col_next.score_high

		WHERE d.lakey = %s", 
		SQLstr($lakey, "int"));
	
	// echo str_replace("\n", "<br>", $sql);
	$rsLaLdmaComments = mysql_query($sql, $Assessment) 
	or die("rsLaLdmaComments: ".mysql_error());
	$row_rsLaLdmaComments = mysql_fetch_assoc($rsLaLdmaComments);
	$totalRows_rsLaLdmaComments = mysql_num_rows($rsLaLdmaComments);

}



// la_comments generic SCORE-DEPENDENT feedback text (filtered by lasnumber range)
// it's more complicated to get for LSUA than for LDMA.
if (checkModule('lsua_reasoning')) {

	// One query to get the relationship choices for each probe
	$query_rsLsuaRelColumns = sprintf("SELECT 
		m1.la_comments_colname AS aspect1, m2.la_comments_colname AS aspect2, 
		m3.la_comments_colname AS aspect3, m4.la_comments_colname AS aspect4,
		m1.menu_item AS aspect1_name, m2.menu_item AS aspect2_name, 
		m3.menu_item AS aspect3_name, m4.menu_item AS aspect4_name
	FROM la_data d 
		LEFT JOIN la_menus m1 ON d.choicekey01 = m1.menukey 
		LEFT JOIN la_menus m2 ON d.choicekey02 = m2.menukey 
		LEFT JOIN la_menus m3 ON d.choicekey03 = m3.menukey 
		LEFT JOIN la_menus m4 ON d.choicekey04 = m4.menukey 
	WHERE d.lakey = %s", 
			SQLstr($lakey, "int"));
	$rsLsuaRelColumns = mysql_query($query_rsLsuaRelColumns, $Assessment) or die("rsEssays: ".mysql_error());
	$rels = mysql_fetch_assoc($rsLsuaRelColumns);
	
	$query_rsLsuaCom = sprintf("SELECT 
			# general description of LSUA thinking in this phase and next phase
			com.lsua_las_comment, next.lsua_las_comment AS lsua_las_comment_next, 
			# Thinking about the self
			com.lsua_self_perspective, com.lsua_social_perspective, com.lsua_temporal_perspective, 
			com.lsua_self_evaluation, com.lsua_self_growth, 
			com.lsua_true_comment, com.lsua_ideal_comment, 
			# Thinking about the self (next phase)
			next.lsua_self_perspective AS lsua_self_perspective_next, 
			next.lsua_social_perspective AS lsua_social_perspective_next, 
			next.lsua_temporal_perspective AS lsua_temporal_perspective_next, 
			next.lsua_self_evaluation AS lsua_self_evaluation_next, 
			next.lsua_self_growth AS lsua_self_growth_next, 
			next.lsua_true_comment AS lsua_true_comment_next, 
			next.lsua_ideal_comment AS lsua_ideal_comment_next, 
			# Possible psychological implications of reasoning in this phase
			com.lsua_struggle1, com.lsua_struggle2, com.lsua_struggle3, com.lsua_struggle4, com.lsua_struggle5, 
			com.lsua_struggle6, com.lsua_struggle7, 
			# Resources (from the overall score)
			com.lsua_resource1, com.lsua_resource2, com.lsua_resource3, com.lsua_resource4, com.lsua_resource5, 
			com.lsua_resource6, com.lsua_resource7,
			# Descriptions of how you think about each yourself in each relationship aspect
			'{$rels['aspect1_name']}' AS aspect_1, '{$rels['aspect2_name']}' AS aspect_2, 
			'{$rels['aspect3_name']}' AS aspect_3, '{$rels['aspect4_name']}' AS aspect_4, 
			com1.{$rels['aspect1']} AS aspect_1_comment, com2.{$rels['aspect2']} AS aspect_2_comment, 
			com3.{$rels['aspect3']} AS aspect_3_comment, com4.{$rels['aspect4']} AS aspect_4_comment,
			# Descriptions of how you think about each relationship (next phase)
			next1.{$rels['aspect1']} AS aspect_1_comment_next, next2.{$rels['aspect2']} AS aspect_2_comment_next, 
			next3.{$rels['aspect3']} AS aspect_3_comment_next, next4.{$rels['aspect4']} AS aspect_4_comment_next
		FROM la_data d
			LEFT JOIN la_scores s ON d.lakey = s.lakey
			# Comments derived from the overall score
			LEFT JOIN la_comments com ON s.lasnumber_1 BETWEEN com.las_number_low AND com.las_number_high
			# Comments for the next phase
			LEFT JOIN la_comments next ON s.lasnumber_1 + 0.25 BETWEEN next.las_number_low AND next.las_number_high
			# Comments derived from individual probes
			LEFT JOIN la_comments com1 ON s.probe01las_1 BETWEEN com1.las_number_low AND com1.las_number_high
			LEFT JOIN la_comments com2 ON s.probe02las_1 BETWEEN com2.las_number_low AND com2.las_number_high
			LEFT JOIN la_comments com3 ON s.probe03las_1 BETWEEN com3.las_number_low AND com3.las_number_high
			LEFT JOIN la_comments com4 ON s.probe04las_1 BETWEEN com4.las_number_low AND com4.las_number_high
			LEFT JOIN la_comments next1 ON s.probe01las_1 + 0.25 BETWEEN next1.las_number_low AND next1.las_number_high
			LEFT JOIN la_comments next2 ON s.probe02las_1 + 0.25 BETWEEN next2.las_number_low AND next2.las_number_high
			LEFT JOIN la_comments next3 ON s.probe03las_1 + 0.25 BETWEEN next3.las_number_low AND next3.las_number_high
			LEFT JOIN la_comments next4 ON s.probe04las_1 + 0.25 BETWEEN next4.las_number_low AND next4.las_number_high
		WHERE d.lakey = %s", SQLstr($lakey, "int"));
	// echo $query_rsLsuaCom; 
	$rsLsuaCom = mysql_query($query_rsLsuaCom) or die("rsLsuaCom: ".mysql_error());
	$row_rsLsuaCom = mysql_fetch_assoc($rsLsuaCom);
	
	
}



if (checkModule('lsua_survey')) {

	// Queries for optimis & character survey results are taken directly from the old lsuareport.php. lakey is used instead of lsuakey.
	
	$query_rsOptimism = sprintf("SELECT optimismkey, lsuakey, optimismcomment, optimismscore, optimismaverage FROM optimismsurvey WHERE lsuakey = %s", 
			SQLstr($lakey, "int"));
	$rsOptimism = mysql_query($query_rsOptimism, $Assessment) or die("rsOptimism: ".mysql_error());
	$row_rsOptimism = mysql_fetch_assoc($rsOptimism);
	$totalRows_rsOptimism = mysql_num_rows($rsOptimism);
	
	
	$query_rsCharacter = sprintf("SELECT characterkey, lsuakey, charactercomment, persistencescore, persistenceaverage, learnerscore, learneraverage, integrityscore, integrityaverage, emotionscore, emotionaverage, challengescore, challengeaverage FROM charactersurvey WHERE lsuakey = %s", 
				SQLstr($lakey, "int"));
	$rsCharacter = mysql_query($query_rsCharacter, $Assessment) or die("rsCharacter: ".mysql_error());
	$row_rsCharacter = mysql_fetch_assoc($rsCharacter);
	$totalRows_rsCharacter = mysql_num_rows($rsCharacter);

}




if (checkModule('management')) {
	// Text fetched here tells you how appropriate your management level is for your complexity of thinking (your LAS score). 
	$query_rsManLevelJuxtapose = sprintf("SELECT mj.manleveljuxtapose 
	FROM la_data d
	JOIN registrants r ON d.userkey = r.userkey 
	LEFT JOIN la_scores s ON d.lakey = s.lakey
	LEFT JOIN demogs_man_level man ON d.manlevelkey = man.manlevelkey
	LEFT JOIN la_man_level_juxtapose mj ON 
			 (s.lasnumber_1 BETWEEN mj.las_number_low AND mj.las_number_high)
			 AND mj.man_level_number = man.man_level_number
	WHERE d.lakey = %s", SQLstr($lakey, "int"));
	$rsManLevelJuxtapose = mysql_query($query_rsManLevelJuxtapose, $Assessment) or die("rsManLevelJuxtapose: ".mysql_error());
	$row_rsManLevelJuxtapose = mysql_fetch_assoc($rsManLevelJuxtapose);
	$totalRows_rsManLevelJuxtapose = mysql_num_rows($rsManLevelJuxtapose);
}



// This function is used throughout the rubric instruments to stitch together stem feedback, in array form,
// into coherent, syntactically smooth descriptions of your performance.
function smoothNarrative ($comments = array()) {
	if (count($comments) == 0) { return ""; }
	
	$text = "";
	// String format: ^firstcomment|secondcomment|$
	$text .= "^";
	foreach ($comments as $c) { $text .= $c."|"; }
	$text .= "$";
	
	// stitch together the elements to flow naturally even if some codes are missing.
	// ensure no spaces after / before the helper characters
	$text = str_replace("^ ", "^", $text);
	$text = str_replace(array("| ", " |"), "|", $text);
	$text = str_replace("|$", "$", $text);
	// If the text starts with "and", replace the and.
	if (strpos(" ".$text, "^and")) {
		$text = str_replace("^and", "^In this performance, you", $text);
	}
	// If the text starts with "You also", then remove the word "also". 
	if (strpos(" ".$text, "^You also")) {
		$text = str_replace("You also", "You ", $text);
	}
	// Add commas before any "second-clauses", and remove the separation marker.
	$text = str_replace("|and", ", and", $text);
	$text = str_replace("|although", ", although", $text);
	// If there's a pipe that doesn't have a period before it, add a period.
	if (strpos($text, "|") AND !strpos($text, ".|")) {
		$text = str_replace("|", ".|", $text);
	} 
	// If the ending statement does NOT have a period, then add a period to it.
	if (!strpos($text, ".$") AND $text <> "^$") { 
		$text = str_replace("$", ".$", $text);
	}
	// remove the helper characters from the string.
	$text = str_replace(array("^", "$", "|"), " ", $text);
			
	return $text;
}



if (checkModule('llra_themes')) {
	/* This section prepares all of the text that will be dropped into the appropriate tabs later on.
	The text is all calculated here for 2 reasons: 
		1) I can recursively autogenerate the content for all tabs with the same bit of code
		2) the content needs to be prepared before the tab is created, because some tabs might be hidden */
	
	$llra_theme_titles = array("none", "cognition", "communication", "ethics", "emotion", 
														 "approach", "personality", "social skills");
	$llra_theme_labels = array("none", "cognition", "communication", "ethics", "emotion", 
														 "approach", "personality", "social");
	$llra_theme_tabtext = array("", "", "", "", "", "", "", "");
	// Slots for the STYLE (3rd-page) menus for each theme
	$llra_theme_codeslots = array(0, 456, 457, 453, 458, 455, 459, 460);
	
	// FOR each theme
	for ($cur_theme = 1; $cur_theme <= 7; $cur_theme ++) {

		// topher("Theme: ".$llra_theme_titles[$cur_theme]);
		// a query to find out what code numbers to look for, for this theme.
		// **** RELIES on having each theme stored in 3 consecutive code slots, as opposed to noncons.
		$row_rs_minmax = mysql_fetch_assoc(mysql_query("
			SELECT MIN(code_number) AS min, MAX(code_number) AS max FROM la_rubrics 
			WHERE instrument_id = 'LLRA' AND type = 'leadership themes' AND theme_name = ".
			SQLstr($llra_theme_labels[$cur_theme], "text") ));
		
		$min_code = $row_rs_minmax['min'];
		
		// Calculate the average score for this theme. 
		// Used both for the What's Next and for the recommendations below.
		$avg_score = 0;	$r_sum = 0; $r_count = 0;
		if (mysql_num_rows($rsTheseRubrics) > 0) { mysql_data_seek($rsTheseRubrics, 0); }
		while ($row_rsTheseRubrics = mysql_fetch_assoc($rsTheseRubrics)) {
			$r_sum += $row_rsTheseRubrics['las_number_low']; 
			$r_count ++;
		}
		if ($r_count > 0) { $avg_score = 1.0 * $r_sum / $r_count; }
		// Use the global score in case this theme wasn't coded.
		// (This means that all 7 themes tabs will always show up on the report.)
		if ($avg_score == 0) { $avg_score = $codes['code492']; }
		
		
		// Fetch FEEDBACK re: what you did (on a per-rubric basis)
		// Feedback is on a per-rubric basis; the query fetches all rubrics for the theme.
		// (There are up to 3 rubrics per LLRA theme.)
		$sql = sprintf(" SELECT r.rubric_stem AS stem_this, r.rubric_item AS item_this,
				rnext.rubric_stem AS stem_next, rnext.rubric_item AS item_next
			FROM la_rubrics r
				LEFT JOIN la_rubrics rnext ON r.instrument_id = rnext.instrument_id AND r.type = rnext.type
					AND r.code_number = rnext.code_number AND r.las_number_low + 0.25 = rnext.las_number_low
			WHERE r.rubrickey = %s OR r.rubrickey = %s OR r.rubrickey = %s 
			ORDER BY r.code_number ", 
			SQLstr($codes['code'.zeropad($min_code, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+1, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+2, 3)], "int"));
		// topher("From code group ".'code'.zeropad($min_code, 3).": <br>".$sql); 
		$rsTheseRubrics = mysql_query($sql) or die(mysql_error);
		// topher($sql);
		
		// Now parse out the syntax for that feedback.
		if (mysql_num_rows($rsTheseRubrics) > 0) {
			$c_this = array();
			$c_next = array();
			// Text is dumped into arrays for "this" feedback and "next" feedback.
			// The arrays will be stitched together syntactically, later.
			while ($row = mysql_fetch_assoc($rsTheseRubrics)) {
				if ($row['item_this'] == "") { continue; } // skip any blank codes
				$c_this[] = $row['stem_this']." ".$row['item_this'];
				$c_next[] = $row['stem_next']." ".$row['item_next'];
			}
			
			// print_r($c_this);
			// Stitch the text together nicely.
			$c_this = smoothNarrative($c_this);
			$c_next = smoothNarrative($c_next);

			// $c_this = implode($c_this);
			// $c_next = implode($c_next);
			
			// Add the text for this report tab, as well as the hidden content for the What's Next window
			if (str_replace(" ", "", $c_this) <> "") { 
				$textToAdd = "<p>{$c_this}</p>";
				
				// Add the link and content for the What's Next feature
				if (strlen($c_next) > 6) { 
					/* 
					// Prepare the correct phrases for the start of the 'this' and 'next' paragraphs
					// (LLRA: The text for the current phase doesn't need to change.)
					$c_next = preg_replace("/^\s?(<p>)?\s?In this performance, you/", 
																 "$1At the next phase, learners", $c_next);
					$c_next = str_replace("you", "learners", $c_next);
					$c_next = str_replace("You", "Learners", $c_next);
					*/
					
					// Prepare the learning activity boilerplate
					$activity = $boilerplate['report_indiv_whatsnext_activity'];
					$activity = str_replace("[SCORE]", sprintf("%1.1f", $avg_score), $activity);
					$activity = str_replace("[THEME]", $llra_theme_labels[$cur_theme], $activity);
					// Add the text for the link and the content. By default, the link goes in a new paragraph.
					$textToAdd .= "<p><a class='whats_next_link'>» what's next</a></p>";
					$textToAdd = str_replace("</p><p><a", " <a", $textToAdd);
					$textToAdd .= "<div class='whats_next_content'>
							<h3>".ucfirst($llra_theme_labels[$cur_theme]).": what's next</h3>
							<p>Test takers scoring at the next phase would see the following description:</p>".
							// <p class='current'>{$c_this}</p>
						 "<p>{$c_next}</p>
							{$activity}
							<p>&nbsp;</p>
						</div>";
				}
				
				$llra_theme_tabtext[$cur_theme] .= $textToAdd; 
			}
		} 
		
		
		// Add the THINKING ABOUT LEADERSHIP feedback, if relevant to this current tab.
		if ($llra_theme_labels[$cur_theme] == "cognition") {
			// APPLICATION
			$row_rsCodeMenu = mysql_fetch_assoc(mysql_query(
				"SELECT * FROM la_rubrics WHERE rubrickey = ".$codes['code451']));
			//$llra_theme_tabtext[$cur_theme] .= "<h3>".ucfirst($row_rsCodeMenu['menu_name'])."</h3>";
			$llra_theme_tabtext[$cur_theme] .= $row_rsCodeMenu['rubric_item'];
		}
		if ($llra_theme_labels[$cur_theme] == "social") {
			// AUTHORITY
			$row_rsCodeMenu = mysql_fetch_assoc(mysql_query(
				"SELECT * FROM la_rubrics WHERE rubrickey = ".$codes['code452']));
			//$llra_theme_tabtext[$cur_theme] .= "<h3>".ucfirst($row_rsCodeMenu['menu_name'])."</h3>";
			$llra_theme_tabtext[$cur_theme] .= $row_rsCodeMenu['rubric_item'];
		}
		if ($llra_theme_labels[$cur_theme] == "approach") {
			// TRANSFORMATIONAL VS TRANSACTIONAL
			$row_rsCodeMenu = mysql_fetch_assoc(mysql_query(
				"SELECT * FROM la_rubrics WHERE rubrickey = ".$codes['code454']));
			//$llra_theme_tabtext[$cur_theme] .= "<h3>".ucfirst($row_rsCodeMenu['menu_name'])."</h3>";
			$llra_theme_tabtext[$cur_theme] .= $row_rsCodeMenu['rubric_item'];
		}
		// Add the comments from the Styles-overall menus (3rd coding page), if that code was marked.
		$theme_styleslot = $llra_theme_codeslots[$cur_theme];
		if ($codes['code'.$theme_styleslot] > 0) {
			$row_rsCodeMenu = mysql_fetch_assoc(mysql_query(
				"SELECT * FROM la_rubrics WHERE rubrickey = ".$codes['code'.$theme_styleslot]));
			//$llra_theme_tabtext[$cur_theme] .= "<h3>".ucfirst($row_rsCodeMenu['menu_name'])."</h3>";
			$llra_theme_tabtext[$cur_theme] .= $row_rsCodeMenu['rubric_item'];
		}
		
		
		
		// FETCH RECOMMENDATIONS FOR GROWTH 
		// This theme's avg_score was calculated up above.
		// Lookup the recommendations text for this theme + this average score.
		$sql = sprintf("SELECT * FROM la_rubrics 
			WHERE type = %s AND theme_name = %s 
			AND %s BETWEEN las_number_low AND las_number_high ",
				SQLstr('recommendations', "text"),
				SQLstr($llra_theme_labels[$cur_theme], "text"),
				SQLstr($avg_score, "double"));
		$row_rsRecommendation = mysql_fetch_assoc(mysql_query($sql));
		// topher($sql); // <-- for troubleshooting
		
		// Add recommendation for this theme
		if (isset($row_rsRecommendation['rubric_item']) AND $row_rsRecommendation['rubric_item'] <> "") {
			$llra_theme_tabtext[$cur_theme] .= $row_rsRecommendation['rubric_item'];
		}
		
		// strip special characters from this text
		$text = $llra_theme_tabtext[$cur_theme];
		$text = preg_replace("/{[^{}]+}/", "", $text);
		// alt regex search: "/ *\([^)]*\) */"
		$text = str_replace(array("*"), "", $text);
		$llra_theme_tabtext[$cur_theme] = $text."<p>&nbsp;</p>";
		
	}
}



if (checkModule('lrja_themes')) {
	/* This section prepares all of the text that will be dropped into the appropriate tabs later on.
	The text is all calculated here for 2 reasons: 
		1) I can recursively autogenerate the content for all tabs with the same bit of code
		2) the content needs to be prepared before the tab is created, because some tabs might be hidden
	*/
	
	$lrja_theme_titles = array("none", "complexity", "evidence", "inquiry", "perspectives", 
														 "truth & certainty");
	$lrja_theme_labels = array("none", "complexity", "evidence", "inquiry", "perspectives", 
														 "truth & certainty");
	$lrja_theme_tabtext = array("", "", "", "", "", "");
	// Slot for the SCALE menu for this theme
	$lrja_theme_codeslots = array(0, 111, 112, 113, 114, 115);
	$lrja_avg_codeslots = array(0, 481, 482, 483, 485, 486);
	
	// FOR each theme
	for ($cur_theme = 1; $cur_theme <= 5; $cur_theme ++) {
		// topher("Preparing theme ".$lrja_theme_labels[$cur_theme]."...");
		$avg_score = $codes['code'.zeropad($lrja_avg_codeslots[$cur_theme], 3)];
		
		// Find out what code numbers to look for, for this theme.
		// **** RELIES on having each theme stored in 3 consecutive code slots, as opposed to noncons.
		$row_rs_minmax = mysql_fetch_assoc(mysql_query("SELECT 
			MIN(code_number) AS min, MAX(code_number) AS max FROM la_rubrics 
			WHERE instrument_id = 'LRJA' AND type LIKE '%themes' AND theme_name = ".
				SQLstr($lrja_theme_labels[$cur_theme], "text") ));
		$min_code = $row_rs_minmax['min'];
		// topher("Starting code for theme ".$llra_theme_labels[$cur_theme]." is ".$min_code."<br>");
		
		
		// Fetch FEEDBACK re: what you did (on a per-rubric basis)
		// Feedback is on a per-rubric basis; the query fetches all rubrics for the theme.
		$sql = sprintf(" SELECT r.rubric_stem AS stem_this, r.rubric_item AS item_this,
				rnext.rubric_stem AS stem_next, rnext.rubric_item AS item_next
			FROM la_rubrics r
				LEFT JOIN la_rubrics rnext ON r.instrument_id = rnext.instrument_id AND r.type = rnext.type
					AND r.code_number = rnext.code_number AND r.las_number_low + 0.25 = rnext.las_number_low
			WHERE r.rubrickey = %s OR r.rubrickey = %s OR r.rubrickey = %s OR r.rubrickey = %s 
			ORDER BY r.code_number ", 
			SQLstr($codes['code'.zeropad($min_code, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+1, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+2, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+3, 3)], "int"));
		// topher("From code group ".'code'.zeropad($min_code, 3).": <br>".$sql); 
		$rsTheseRubrics = mysql_query($sql) or die(mysql_error);
		
		// Now parse out the syntax for that feedback.
		if (mysql_num_rows($rsTheseRubrics) > 0) {
			$c_this = array();
			$c_next = array();
			// Text is dumped into arrays for "this" feedback and "next" feedback.
			// The arrays will be stitched together syntactically, later.
			while ($row = mysql_fetch_assoc($rsTheseRubrics)) {
				if ($row['item_this'] == "") { continue; } // skip any blank codes
				$c_this[] = $row['stem_this']." ".$row['item_this'];
				$c_next[] = $row['stem_next']." ".$row['item_next'];
			}
			
			// Stitch the text together nicely.
			$c_this = smoothNarrative($c_this);
			$c_next = smoothNarrative($c_next);
			// $c_this = implode($c_this);
			// $c_next = implode($c_next);
			
			// Add the text for this report tab, as well as the hidden content for the What's Next window
			if (str_replace(" ", "", $c_this) <> "") { 
				$textToAdd = "<p>{$c_this}</p>";
				
				// Add the link and content for the What's Next feature
				if (strlen($c_next) > 6) { 
					/*
					// Prepare the correct phrases for the start of the 'this' and 'next' paragraphs
					$c_this = preg_replace("/^\s?(<p>)?\s?You/", "$1Currently, you", $c_this);
					$c_next = preg_replace("/^\s?(<p>)?\s?You/", "$1At the next phase, learners", $c_next);
					$c_next = str_replace("you", "learners", $c_next);
					$c_next = str_replace("You", "Learners", $c_next);
					*/
					// Prepare the learning activity boilerplate
					$activity = $boilerplate['report_indiv_whatsnext_activity'];
					$activity = str_replace("[SCORE]", sprintf("%1.1f", $avg_score), $activity);
					$activity = str_replace("[THEME]", $lrja_theme_labels[$cur_theme], $activity);
					// Add the text for the link and the content. By default, the link goes in a new paragraph.
					$textToAdd .= "<p><a class='whats_next_link'>» what's next</a></p>";
					$textToAdd = str_replace("</p><p><a", " <a", $textToAdd);
					$textToAdd .= "<div class='whats_next_content'>
							<h3>".ucfirst($lrja_theme_labels[$cur_theme]).": what's next</h3>
							<p>Test takers scoring at the next phase would see the following description:</p>".
							// <p class='current'>{$c_this}</p>
						 "<p>{$c_next}</p>
							{$activity}
							<p>&nbsp;</p>
						</div>";
				}
				
				$lrja_theme_tabtext[$cur_theme] .= $textToAdd; 
			}
		} 
		
		
		
		// Add comments on this theme from the 3rd coding page, if that code was marked.
		$theme_styleslot = $lrja_theme_codeslots[$cur_theme];
		if ($codes['code'.$theme_styleslot] > 0) {
			$row_rsCodeMenu = mysql_fetch_assoc(mysql_query(
				"SELECT * FROM la_rubrics WHERE rubrickey = ".$codes['code'.$theme_styleslot]));
			$lrja_theme_tabtext[$cur_theme] .= $row_rsCodeMenu['rubric_item'];
		}
		
		// Fetch RECOMMENDATION for each theme - reference the theme avg, if present, or global avg if not.
		// topher("Average score for theme ".$lrja_theme_labels[$cur_theme]." (slot ".
		//	'code'.zeropad($lrja_avg_codeslots[$cur_theme], 3).") = ".$avg_score);
		if ($avg_score == 0) { $avg_score = $codes['code491']; } // use global avg as backup score
		// Then lookup the recommendations text for this theme + this average score.
		$sql = sprintf("SELECT * FROM la_rubrics 
			WHERE instrument_id = %s AND type = %s 
			AND theme_name = %s AND %s BETWEEN las_number_low AND las_number_high ",
				SQLstr($instrument_id_base, "text"),
				SQLstr('theme feedback', "text"),
				SQLstr($lrja_theme_labels[$cur_theme], "text"),
				SQLstr($avg_score, "double"));
		// topher("Query for recommendations: <br>".$sql); 
		$row_rsRecommendation = mysql_fetch_assoc(mysql_query($sql));
		// Add the recommendation for this theme
		if (isset($row_rsRecommendation['rubric_item']) AND $row_rsRecommendation['rubric_item'] <> "") {
			$lrja_theme_tabtext[$cur_theme] .= $row_rsRecommendation['rubric_item'];
		}
		
		// strip special characters from this text
		$text = $lrja_theme_tabtext[$cur_theme];
		$text = preg_replace("/{[^{}]+}/", "", $text);
		// alt regex search: "/ *\([^)]*\) */"
		$text = str_replace(array("*"), "", $text);
		$lrja_theme_tabtext[$cur_theme] = $text."<p>&nbsp;</p>";
		
	}
	
	// print_r($lrja_theme_tabtext);
}





if (checkModule('ldpa_themes')) {
	/* This section prepares all of the text that will be dropped into the appropriate tabs later on.
	The text is all calculated here for 2 reasons: 
		1) I can recursively autogenerate the content for all tabs with the same bit of code
		2) the content needs to be prepared before the tab is created, because some tabs might be hidden
	*/
	// **** Any time I define arrays of data within the page, I should ALWAYS use nested arrays for associated data, rather than having multiple unrelated arrays as I do here. It's more text, but infinitely clearer and easier to troubleshoot.
	
	$ldpa_theme_titles = array("none", 
		"developmental psychology", 
		"methodology",
		"psychological structures", 
		"developmental dynamics",
		"theory and practice",
		"learning", 
		"developmental pedagogy", 
		"curricula", 
		"assessment"
		);
	$ldpa_theme_labels = array("none", 
		"developmental psychology as a field", 
		"methodology",
		"nature of psychological structures", 
	 	"developmental dynamics",
		"theory and practice",
		"learning", 
		"developmental pedagogy", 
		"curricula", 
		"assessment"
		);
	$ldpa_theme_tabtext = array("", "", "", "", "", "");
	// Slot for the SCALE menu for this theme
	$ldpa_theme_codeslots = array(0, 455, 454, 451, 452, 456, 457, 453, 458, 459);
	// Slot for the AVERAGE SCORE for each theme
	$ldpa_avg_codeslots =   array(0, 485, 484, 481, 482, 486, 487, 483, 488, 489);
	
	// FOR each theme
	for ($cur_theme = 1; $cur_theme <= 9; $cur_theme ++) {
		// topher("Preparing theme ".$ldpa_theme_labels[$cur_theme]."...");
		
		// Find out the score for this theme.
		// reference the theme avg, if present, or global avg if not.
		$avg_score = $codes['code'.zeropad($ldpa_avg_codeslots[$cur_theme], 3)];
		// topher("Average score for theme ".$ldpa_theme_labels[$cur_theme]." (slot ".
		//	'code'.zeropad($ldpa_avg_codeslots[$cur_theme], 3).") = ".$avg_score);
		if ($avg_score == 0) { $avg_score = $codes['code491']; } // use global avg as backup score
		
		// a query to find out what code numbers to look for, for this theme.
		// **** RELIES on having each theme stored in 3 consecutive code slots, as opposed to nonconsecutive.
		$row_rs_minmax = mysql_fetch_assoc(mysql_query("SELECT 
			MIN(code_number) AS min, MAX(code_number) AS max FROM la_rubrics 
			WHERE instrument_id = 'LDPA' AND type LIKE '%themes' AND theme_name = ".
				SQLstr($ldpa_theme_labels[$cur_theme], "text") ));
		$min_code = $row_rs_minmax['min'];
		// topher("Starting code for theme ".$llra_theme_labels[$cur_theme]." is ".$min_code."<br>");
		
		
		
		// Fetch FEEDBACK re: what you did (on a per-rubric basis)
		// Feedback is on a per-rubric basis; the query fetches all rubrics for the theme.
		$sql = sprintf(" SELECT r.rubric_stem AS stem_this, r.rubric_item AS item_this,
				rnext.rubric_stem AS stem_next, rnext.rubric_item AS item_next
			FROM la_rubrics r
				LEFT JOIN la_rubrics rnext ON r.instrument_id = rnext.instrument_id AND r.type = rnext.type
					AND r.code_number = rnext.code_number AND r.las_number_low + 0.25 = rnext.las_number_low
			WHERE r.rubrickey = %s OR r.rubrickey = %s OR r.rubrickey = %s OR r.rubrickey = %s 
			GROUP BY r.rubrickey
			ORDER BY r.code_number ", 
			SQLstr($codes['code'.zeropad($min_code, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+1, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+2, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+3, 3)], "int"));
		// echo "From code group ".'code'.zeropad($min_code, 3).": <br>".$sql."<br><br>"; 
		$rsTheseRubrics = mysql_query($sql) or die(mysql_error);
		
		// Now parse out the syntax for that feedback.
		if (mysql_num_rows($rsTheseRubrics) > 0) {
			$c_this = array();
			$c_next = array();
			// Text is dumped into arrays for "this" feedback and "next" feedback.
			// The arrays will be stitched together syntactically, later.
			while ($row = mysql_fetch_assoc($rsTheseRubrics)) {
				if ($row['item_this'] == "") { continue; } // skip any blank codes
				$c_this[] = $row['stem_this']." ".$row['item_this'];
				if ($row['item_next'] <> "") { $c_next[] = $row['stem_next']." ".$row['item_next']; }
			}
			
			// Stitch the text together nicely.
			$c_this = implode($c_this);
			$c_next = implode($c_next);
			
			// Add the text for this report tab, as well as the hidden content for the What's Next window
			if (str_replace(" ", "", $c_this) <> "") { 
				$textToAdd = "{$c_this}"; // For the LDPA, the stems contain the HTML markup and don't need <p> tags.
				
				// Add the link and content for the What's Next feature
				if ($c_next <> "") { 
				  /* 
					// Prepare the correct phrases for the start of the 'this' and 'next' paragraphs
					$c_this = preg_replace("/^\s?(<p>)?\s?You/", "$1Currently, you", $c_this);
					$c_next = preg_replace("/^\s?(<p>)?\s?You/", "$1At the next phase, learners", $c_next);
					$c_next = str_replace("you", "learners", $c_next);
					$c_next = str_replace("You", "Learners", $c_next);
					*/
					// Prepare the learning activity boilerplate
					$activity = $boilerplate['report_indiv_whatsnext_activity'];
					$activity = str_replace("[SCORE]", sprintf("%1.1f", $avg_score), $activity);
					$activity = str_replace("[THEME]", $ldpa_theme_labels[$cur_theme], $activity);
					// Add the text for the link and the content. Some LDPA stems contain bulleted lists etc., 
					// which complicates adding the ending link.
					// By default, add the Whats Next text to a new paragraph following the stem.
					$textToAdd .= "<p><a class='whats_next_link'>» what's next</a></p>";
					// but combine it with the previous P if possible.
					$textToAdd = str_replace("</p><p><a", " <a", $textToAdd); 
					$textToAdd = str_replace("<p><a", " <a", $textToAdd); 
					$textToAdd .= "<div class='whats_next_content'>
							<h3>".ucfirst($ldpa_theme_labels[$cur_theme]).": what's next</h3>
						  <p>Test takers scoring at the next phase would see the following description:</p>".
						  // <p class='current'>{$c_this}</p>
						 "<p>{$c_next}</p>
							{$activity}
							<p>&nbsp;</p>
						</div>";
				}
				
				$ldpa_theme_tabtext[$cur_theme] .= $textToAdd; 
			}
		} 
		
		
		
		
		// Add comments on this theme from the 3rd coding page, if that code was marked.
		$theme_styleslot = $ldpa_theme_codeslots[$cur_theme];
		if ($codes['code'.$theme_styleslot] > 0) {
			$row_rsCodeMenu = mysql_fetch_assoc(mysql_query(
				"SELECT * FROM la_rubrics WHERE rubrickey = ".$codes['code'.$theme_styleslot]));
			$ldpa_theme_tabtext[$cur_theme] .= $row_rsCodeMenu['rubric_item'];
		}
		
		// Fetch RECOMMENDATION ("Theme feedback") for each theme 
		// Lookup the recommendations text for this theme + this average score.
		$sql = sprintf("SELECT * FROM la_rubrics 
			WHERE instrument_id = %s AND type = %s 
			AND theme_name = %s AND %s BETWEEN las_number_low AND las_number_high ",
				SQLstr($instrument_id_base, "text"),
				SQLstr('theme feedback', "text"),
				SQLstr($ldpa_theme_labels[$cur_theme], "text"),
				SQLstr($avg_score, "double"));
		// echo "Query for recommendations: <br>".$sql; 
		$row = mysql_fetch_assoc(mysql_query($sql));
		// Add the recommendation for this theme
		if (isset($row['rubric_item']) AND $row['rubric_item'] <> "") {
			$ldpa_theme_tabtext[$cur_theme] .= $row['rubric_stem']." ".$row['rubric_item'];
		}
		
		// strip special characters from this text
		$text = $ldpa_theme_tabtext[$cur_theme];
		$text = preg_replace("/{[^{}]+}/", "", $text);
		// alt regex search: "/ *\([^)]*\) */"
		$text = str_replace(array("*"), "", $text);
		$ldpa_theme_tabtext[$cur_theme] = $text."<p>&nbsp;</p>";
		
	}
	
	// print_r($ldpa_theme_tabtext);
}






if (checkModule('lima_themes')) {
	/* This section prepares all of the text that will be dropped into the appropriate tabs later on.
	The text is all calculated here for 2 reasons: 
		1) I can recursively autogenerate the content for all tabs with the same bit of code
		2) the content needs to be prepared before the tab is created, because some tabs might be hidden
	*/
	
	$lima_theme_titles = array("none", "quadrants as tools", "quadrants as perspectives",
															 "quadrants as methods", "quadrants as constructs",
															 "levels as constructs", "developmental change",
															 "evolving worldviews", "levels and lines as tools");
	$lima_theme_labels = array("none", "quadrants as analytical tools", "quadrants as perspectives",
															 "quadrants as methods", "quadrants as theoretical constructs",
															 "levels as theoretical constructs", "developmental change",
															 "evolving worldviews", "levels and lines as analytical tools");
	$lima_theme_tabtext = array("", "", "", "", "", "", "", "", "");
	// Slot for the AVERAGE SCORE for each theme
	$lima_avg_codeslots =   array(0, 471, 472, 473, 474, 481, 482, 483, 486);
	
	// FOR each theme
	for ($cur_theme = 1; $cur_theme <= 8; $cur_theme ++) {
		
		// Get the average score for this theme.
		$avg_score = $codes['code'.zeropad($lima_avg_codeslots[$cur_theme], 3)];
		// topher("Average score for theme ".$lima_theme_labels[$cur_theme]." (slot ".
		//	'code'.zeropad($lima_avg_codeslots[$cur_theme], 3).") = ".$avg_score);
		if ($avg_score == 0) { $avg_score = $codes['code491']; } // use global avg as backup score
		
		// topher("Preparing theme ".$lima_theme_labels[$cur_theme]."...");
		// a query to find out what code numbers to look for, for this theme.
		// **** RELIES on having each theme stored in 2 consecutive code slots, as opposed to noncons.
		$row_rs_minmax = mysql_fetch_assoc(mysql_query("SELECT 
			MIN(code_number) AS min, MAX(code_number) AS max FROM la_rubrics 
			WHERE instrument_id = 'LIMA' AND type LIKE '%themes' AND theme_name = ".
				SQLstr($lima_theme_labels[$cur_theme], "text") ));
		$min_code = $row_rs_minmax['min'];
		// topher("Starting code for theme ".$llra_theme_labels[$cur_theme]." is ".$min_code."<br>");
		
		// Fetch FEEDBACK re: what you did (on a per-rubric basis)
		// Feedback is on a per-rubric basis; the query fetches all 2 rubrics for the theme.
		$sql = sprintf(" SELECT r.rubric_stem AS stem_this, r.rubric_item AS item_this,
				rnext.rubric_stem AS stem_next, rnext.rubric_item AS item_next
			FROM la_rubrics r
				LEFT JOIN la_rubrics rnext ON r.instrument_id = rnext.instrument_id AND r.type = rnext.type
					AND r.code_number = rnext.code_number AND r.las_number_low + 0.25 = rnext.las_number_low
			WHERE r.rubrickey = %s OR r.rubrickey = %s 
			ORDER BY r.code_number ", 
			SQLstr($codes['code'.zeropad($min_code, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+1, 3)], "int"));
		// echo str_replace("\n", "<br>", $sql)."<br>"; 
		$rsTheseRubrics = mysql_query($sql) or die(mysql_error());
		
		// Now parse out the syntax for that feedback. (If rubrics were marked)
		if (mysql_num_rows($rsTheseRubrics) > 0) {
			// $lima_theme_tabtext[$cur_theme] .= "<p>";
			
			$c_this = array();
			$c_next = array();
			while ($row = mysql_fetch_assoc($rsTheseRubrics)) {
				if ($row['item_this'] == "") { continue; } // skip any blank codes
				$c_this[] = $row['stem_this']." ".$row['item_this'];
				$c_next[] = $row['stem_next']." ".$row['item_next'];
			}
			// Stitch the text together nicely.
			// $textToAdd = smoothNarrative($comments_this);
			$c_this = implode($c_this);
			$c_next = implode($c_next);
			
			$textToAdd = "";
			if (str_replace(" ", "", $c_this) <> "") { 
				$textToAdd .= "<p>{$c_this}</p>";
				
				if (strlen($c_next) > 6) { 
					// Add the What's Next link and (invisible) theme text
					// $c_this = preg_replace("/^\s?(<p>)?\s?You appear to/", "$1Currently, you appear to", $c_this);
					// $c_next = preg_replace("/^\s?(<p>)?\s?You appear to/", 
					// 						"$1At the next phase, learners are likely to", $c_next);
					// $c_next = str_replace("you", "learners", $c_next);
					// $c_next = str_replace("You", "Learners", $c_next);
					$activity = $boilerplate['report_indiv_whatsnext_activity'];
					$activity = str_replace("[SCORE]", sprintf("%1.1f", $avg_score), $activity);
					$activity = str_replace("[THEME]", $lima_theme_labels[$cur_theme], $activity);
					$textToAdd = substr($textToAdd, 0, strlen($textToAdd)-4);
					$textToAdd .= " <a class='whats_next_link'>» what's next</a></p>";
					$textToAdd .= "<div class='whats_next_content'>
							<h3>".ucfirst($lima_theme_labels[$cur_theme]).": what's next</h3>
						  <p>Test takers scoring at the next phase would see the following description:</p>".
							// <p class='current'>{$c_this}</p>
						 "<p>{$c_next}</p>
							{$activity}
							<p>&nbsp;</p>
						</div>";
				}
				
				$lima_theme_tabtext[$cur_theme] .= $textToAdd; 
			}
		} 
		
		// If nothing was coded for this theme (if the test taker didn't address it),
		// display generic "Because you didn't discuss" feedback.
		if (mysql_num_rows($rsTheseRubrics) == 0) {
			$boil = $boilerplate['report_didnt_discuss_theme_feedback'];
			$boil = str_replace("[THEME_NAME]", $lima_theme_labels[$cur_theme], $boil);
			$lima_theme_tabtext[$cur_theme] .= $boil;
		}
		
		// Fetch RECOMMENDATION ("Theme feedback") for each theme 
		// reference the theme avg, if present, or global avg if not. (calculated the score above)
		// Then lookup the recommendations text for this theme + this average score.
		$sql = sprintf("SELECT * FROM la_rubrics 
			WHERE instrument_id = %s AND type = %s 
			AND theme_name = %s AND %s BETWEEN las_number_low AND las_number_high ",
				SQLstr($instrument_id_base, "text"),
				SQLstr('theme feedback', "text"),
				SQLstr($lima_theme_labels[$cur_theme], "text"),
				SQLstr($avg_score, "double"));
		// echo "Query for recommendations: <br>".$sql; 
		$row = mysql_fetch_assoc(mysql_query($sql));
		// Add the recommendation for this theme
		if (isset($row['rubric_item']) AND $row['rubric_item'] <> "") {
			$lima_theme_tabtext[$cur_theme] .= $row['rubric_stem']." ".$row['rubric_item'];
		}
		
		// strip special characters from this text
		$text = $lima_theme_tabtext[$cur_theme];
		$text = preg_replace("/{[^{}]+}/", "", $text);
		// alt regex search: "/ *\([^)]*\) */"
		$text = str_replace(array("*"), "", $text);
		$lima_theme_tabtext[$cur_theme] = $text."<p>&nbsp;</p>";
		
	}
}






if (checkModule('lera_themes')) {
	/* This section prepares all of the text that will be dropped into the appropriate tabs later on.
	The text is all calculated here for 2 reasons: 
		1) I can recursively autogenerate the content for all tabs with the same bit of code
		2) the content needs to be prepared before the tab is created, because some tabs might be hidden
	*/
	
	$lera_theme_titles = array("none", "ethics", "the good and the right", 
														 "values and beliefs", "ethics and perspectives", 
														 "ethical relativism", "ethics and spirituality", 
														 "ethical decision making", "ethics in citizenship");
	$lera_theme_labels = array("none", "ethics", "the good and the right", 
														 "values and beliefs", "ethics and perspectives", 
														 "ethical relativism", "ethics and spirituality", 
														 "ethical decision making", "ethics in citizenship");
	$lera_theme_tabtext = array("", "", "", "", "", "", "", "", "");
	// Slot for the SCALE menu for this theme
	$lera_theme_codeslots = array(0, 451, 452, 453, 454, 455, 456, 457, 458);
	$lera_avg_codeslots = array(0, 481, 482, 483, 484, 485, 486, 487, 488);
	
	// FOR each theme
	for ($cur_theme = 1; $cur_theme <= 8; $cur_theme ++) {
		// topher("Preparing theme ".$lera_theme_labels[$cur_theme]."...");
		
		// Get average score for this theme
		$avg_score = $codes['code'.zeropad($lera_avg_codeslots[$cur_theme], 3)];
		if ($avg_score == 0) { $avg_score = $codes['code491']; } // use global avg as backup score
		
		// a query to find out what code numbers to look for, for this theme.
		// **** RELIES on having each theme stored in 3 consecutive code slots, as opposed to noncons.
		$row_rs_minmax = mysql_fetch_assoc(mysql_query("SELECT 
			MIN(code_number) AS min, MAX(code_number) AS max FROM la_rubrics 
			WHERE instrument_id = 'LERA' AND type = 'ethics themes' AND theme_name = ".
				SQLstr($lera_theme_labels[$cur_theme], "text") ));
		$min_code = $row_rs_minmax['min'];
		// topher("Starting code for theme ".$lera_theme_labels[$cur_theme]." is ".$min_code."<br>");
		
		// Fetch FEEDBACK re: what you did (on a per-rubric basis)
		// Feedback is on a per-rubric basis; the query fetches all rubrics for the theme.
		$sql = sprintf(" SELECT r.rubric_stem AS stem_this, r.rubric_item AS item_this,
				rnext.rubric_stem AS stem_next, rnext.rubric_item AS item_next
			FROM la_rubrics r
				LEFT JOIN la_rubrics rnext ON r.instrument_id = rnext.instrument_id AND r.type = rnext.type
					AND r.code_number = rnext.code_number AND r.las_number_low + 0.25 = rnext.las_number_low
			WHERE r.rubrickey = %s OR r.rubrickey = %s OR r.rubrickey = %s OR r.rubrickey = %s 
			ORDER BY r.code_number ", 
			SQLstr($codes['code'.zeropad($min_code, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+1, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+2, 3)], "int"),
			SQLstr($codes['code'.zeropad($min_code+3, 3)], "int"));
		// topher("From code group ".'code'.zeropad($min_code, 3).": <br>".$sql); 
		$rsTheseRubrics = mysql_query($sql) or die(mysql_error);
		
		// Now parse out the syntax for that feedback.
		if (mysql_num_rows($rsTheseRubrics) > 0) {
			$c_this = array();
			$c_next = array();
			
			// Text is dumped into arrays for "this" feedback and "next" feedback.
			// The arrays will be stitched together syntactically, later.
			while ($row = mysql_fetch_assoc($rsTheseRubrics)) {
				if ($row['item_this'] == "") { continue; } // skip any blank codes
				$c_this[] = $row['stem_this']." ".$row['item_this'];
				$c_next[] = $row['stem_next']." ".$row['item_next'];
			}
			
			// Stitch the text together nicely.
			$c_this = smoothNarrative($c_this);
			$c_next = smoothNarrative($c_next);
			// $c_this = implode($c_this);
			// $c_next = implode($c_next);
			
			// Add the text for this report tab, as well as the hidden content for the What's Next window
			if (str_replace(" ", "", $c_this) <> "") { 
				$textToAdd = "<p>{$c_this}</p>";
				
				// Add the link and content for the What's Next feature
				if (strlen($c_next) > 6) { 
					/* 
					// Prepare the correct phrases for the start of the 'this' and 'next' paragraphs
					$c_this = preg_replace("/^\s?(<p>)?\s?You/", "$1Currently, you", $c_this);
					$c_next = preg_replace("/^\s?(<p>)?\s?You/", "$1At the next phase, learners", $c_next);
					$c_next = str_replace("you", "learners", $c_next);
					$c_next = str_replace("You", "Learners", $c_next);
					*/ 
					// Prepare the learning activity boilerplate
					$activity = $boilerplate['report_indiv_whatsnext_activity'];
					$activity = str_replace("[SCORE]", sprintf("%1.1f", $avg_score), $activity);
					$activity = str_replace("[THEME]", $lera_theme_labels[$cur_theme], $activity);
					// Add the text for the link and the content.
					$textToAdd = preg_replace("/<\/p>$/", " <a class='whats_next_link'>» what's next</a></p>", $textToAdd);
					$textToAdd .= "<div class='whats_next_content'>
							<h3>".ucfirst($lera_theme_labels[$cur_theme]).": what's next</h3>
						  <p>Test takers scoring at the next phase would see the following description:</p>
							<p>{$c_next}</p>
							{$activity}
							<p>&nbsp;</p>
						</div>";
				}
				
				$lera_theme_tabtext[$cur_theme] .= $textToAdd; 
			}
			
		} 
		
		// Add comments on this theme from the 3rd coding page, if that code was marked.
		$theme_styleslot = $lera_theme_codeslots[$cur_theme];
		if ($codes['code'.$theme_styleslot] > 0) {
			$row_rsCodeMenu = mysql_fetch_assoc(mysql_query(
				"SELECT * FROM la_rubrics WHERE rubrickey = ".$codes['code'.$theme_styleslot]));
			$lera_theme_tabtext[$cur_theme] .= $row_rsCodeMenu['rubric_item'];
		}
		
		// Fetch RECOMMENDATION for each theme
		// Lookup the recommendations text for this theme + this average score.
		$sql = sprintf("SELECT * FROM la_rubrics 
			WHERE instrument_id = %s AND type = %s 
			AND theme_name = %s AND %s BETWEEN las_number_low AND las_number_high ",
				SQLstr($instrument_id_base, "text"),
				SQLstr('theme feedback', "text"),
				SQLstr($lera_theme_labels[$cur_theme], "text"),
				SQLstr($avg_score, "double"));
		// topher("Query for recommendations: <br>".$sql); 
		$row_rsRecommendation = mysql_fetch_assoc(mysql_query($sql));
		// Add the recommendation for this theme
		if (isset($row_rsRecommendation['rubric_item']) AND $row_rsRecommendation['rubric_item'] <> "") {
			$lera_theme_tabtext[$cur_theme] .= $row_rsRecommendation['rubric_item'];
		}
		
		// strip special characters from this text
		$text = $lera_theme_tabtext[$cur_theme];
		$text = preg_replace("/{[^{}]+}/", "", $text);
		// alt regex search: "/ *\([^)]*\) */"
		$text = str_replace(array("*"), "", $text);
		$lera_theme_tabtext[$cur_theme] = $text."<p>&nbsp;</p>";
	}
	
	// print_r($lera_theme_tabtext); exit();
}

if (checkModule('lera_moralemotions')) {	
	// Prepare LERA MORAL EMOTIONS survey feedback
	// This just lists the emotions that you mentioned, grouped by positive, negative, and pos/neg (both) feedback.
	$lera_eesurvey_tabtext = $boilerplate['report_lera_eesurvey_intro'];
	$survey_groups_sql = array(
		"c3.category_name = 'good'",
		"(c3.category_name = 'moral' OR c3.category_name = 'both') AND c4.category_name = 'positive'",
		"(c3.category_name = 'moral' OR c3.category_name = 'both') AND c4.category_name = 'both'",
		"(c3.category_name = 'moral' OR c3.category_name = 'both') AND c4.category_name = 'negative'"
	);
	$survey_groups_boilerplate = array(
		"report_lera_eesurvey_goodlife",
		"report_lera_eesurvey_positive",
		"report_lera_eesurvey_both",
		"report_lera_eesurvey_negative"
	);
	
	// print_r($row_rsSurvey);
	// for each grouping of survey stems
	for ($i = 0; $i < 4; $i ++) {
		$sql = sprintf("SELECT s.*
			FROM la_survey_stems s
			LEFT JOIN la_survey_factor_categories c3 ON s.factor3 = c3.categorykey
			LEFT JOIN la_survey_factor_categories c4 ON s.factor4 = c4.categorykey
			WHERE instrument_id = 'LERA' AND type = 'coding' AND part = 2 AND %s ",
				$survey_groups_sql[$i]);
		$rsSelections = mysql_query($sql) or die(mysql_error());
		// were any of these survey stems selected?
		$bullets = "";
		$s = 0; // track how many stems were selected
		while ($row_rsSelections = mysql_fetch_assoc($rsSelections)) {
			$code = zeropad($row_rsSelections['stem_code'],3);
			// topher("so far so good. Looking at stem ".$code);
			if ($codes['code'.$code] > 0) {
				$bullets .= "<li>".$row_rsSelections['stem_description']."</li>";
				$s ++; 
			}
		}
		// if some stems were selected in this grouping, prepare the comment.
		if ($s > 0) { 
			$text = $boilerplate[$survey_groups_boilerplate[$i]];
			$text = str_replace("[BULLETS]", "<ul>".$bullets."</ul>", $text);
			$text = str_replace("[COUNT]", $s, $text);
			$text = str_replace("[s]", ($s > 1 ? "s" : ""), $text);
			$lera_eesurvey_tabtext .= $text;
		}
	}
	
}






// Miscellaneous results per test time: general results for the "Select a report to view" panel, as well as argumentation codes across test time. 

$query_rsLaDataOverTime = sprintf("SELECT d.lakey, d.test_time, d.date_completed, 
		c.argumentation_probe, c.argumentation_relevance_scenario, 
		c.argumentation_repetitive, c.argumentation_on_point, 
		c.argumentation_conciseness, c.argumentation_concise_overly, 
		c.argumentation_jargon, c.argumentation_framing, c.argumentation_clarity,
		c.argumentation_fragment, c.argumentation_persuasiveness, 
		c.argumentation_english, c.argumentation_overall, 
		c.argumentation_scale_mechanics, 
		c.code451 AS P_TAKEN_QUALITY, 
		c.code452 AS P_SOUGHT_QUALITY, 
		c.code453 AS P_COORD_SCORE,
		c.code454 AS CONTEXT_SCORE, 
		c.code455 AS DM_SCORE, 
		c.code456 AS COLLAB_SCORE, 
		c.code491,
		((round(c.code492)-10)/(12.5-10)) AS LLRA_LEADTHEMES,
		ROUND(s.lasnumber_1, 2) AS lasnumber_1 
	FROM la_data d
		JOIN {$code_table} c ON d.lakey = c.lakey
		LEFT JOIN la_scores s ON d.lakey = s.lakey
		LEFT JOIN la_dilemmas di ON d.dilemmakey = di.dilemmakey
	WHERE d.userkey = %s AND (d.finalized %s OR d.lakey = %s) AND d.finalized <> 3
	  {$filter_instrument_id} 
	GROUP BY d.lakey ORDER BY d.test_time, d.date_completed ", 
		SQLstr($row_rsRegistrants['userkey'], "int"),
		// if you're the test taker, include only other released records. Otherwise include finalized.
		($row_rsRegistrants['userkey'] == $_SESSION['log_userkey'] ? " = 1" : " >= 1"),
		SQLstr($lakey, "int"));
$rsLaDataOverTime = mysql_query($query_rsLaDataOverTime) or die("rsLaDataOverTime: ".mysql_error());
$row_rsLaDataOverTime = mysql_fetch_assoc($rsLaDataOverTime);









// ------------------------ GENERIC TEXT TO PUT IN REPORT ------------------------ //
// Various forms of boilerplate text that isn't directly associated with test taker data


$query_rsLaCodeDescriptions = sprintf("SELECT * FROM la_code_descriptions WHERE instrument_id = %s", SQLstr($instrument_id_base, "text"));
$rsLaCodeDescriptions = mysql_query($query_rsLaCodeDescriptions, $Assessment) or die("rsLaCodeDescriptions: ".mysql_error());
$row_rsLaCodeDescriptions = mysql_fetch_assoc($rsLaCodeDescriptions);
$totalRows_rsLaCodeDescriptions = mysql_num_rows($rsLaCodeDescriptions);


$query_rsLaCodeMenus = "SELECT * FROM la_code_menus";
$rsLaCodeMenus = mysql_query($query_rsLaCodeMenus, $Assessment) or die("rsLaCodeMenus: ".mysql_error());
$totalRows_rsLaCodeMenus = mysql_num_rows($rsLaCodeMenus);



$query_rsDemogsManLevelGeneral = "SELECT * FROM demogs_man_level_general";
$rsDemogsManLevelGeneral = mysql_query($query_rsDemogsManLevelGeneral, $Assessment) or die("rsDemogsManLevelGeneral: ".mysql_error());
$row_rsDemogsManLevelGeneral = mysql_fetch_assoc($rsDemogsManLevelGeneral);
$totalRows_rsDemogsManLevelGeneral = mysql_num_rows($rsDemogsManLevelGeneral);







/** 					Queries for management level averages
**** This only works with the old LDMAs. Once we have enough data, we'll want to make the sample levels table pull from both the old ldmascores and new la_scores. But when we do that, we'll also have to adjust the query to also look up the man level of each manlevelkey, since those are not aligned in the new data. Just an extra step to remember. 
*/

$query_rsManLevelAverages = "SELECT AVG(ldmascores.lasnumber_1) AS avg, ldma.manlevel, count(ldma.ldmakey) AS n 
FROM ldma, ldmascores 
WHERE ldma.ldmakey = ldmascores.ldmakey AND ldmascores.lasnumber_1 > 8 
GROUP BY ldma.manlevel ORDER BY ldma.manlevel DESC";
$rsManLevelAverages = mysql_query($query_rsManLevelAverages, $Assessment) or die(mysql_error());
$row_rsManLevelAverages = mysql_fetch_assoc($rsManLevelAverages);

// Store the average score for each manlevelavg
$manLevelAvg = array();
$manLevelN = array();
while ($row_rsManLevelAverages = mysql_fetch_assoc($rsManLevelAverages)) {
	$manLevelAvg[$row_rsManLevelAverages['manlevel']] = round($row_rsManLevelAverages['avg'], 1);
	$manLevelN[$row_rsManLevelAverages['manlevel']] = $row_rsManLevelAverages['n'];
	// We're not currently displaying Ns, but when we do it will be easy to do.
}

	



// ------------------------- CHART QUERIES ------------------------- //

$rand = "(RAND()*4)-2";
$query_chartResultsByTestTime = sprintf("SELECT d.test_time AS TEST_TIME, 
		ROUND(s.lasnumber_1, 2) AS LAS_SCORE,
		LEAST(c.argumentation_overall * 20, 100) AS argumentation_overall,
		LEAST(c.argumentation_scale_mechanics * 20, 100) AS argumentation_scale_mechanics,
		
		LEAST(ROUND((c.argumentation_persuasiveness*20)+{$rand}), 100) AS arg_persuasiveness, 
		LEAST(ROUND((c.argumentation_probe*20)+{$rand}), 100) AS arg_probe, 
		LEAST(ROUND((c.argumentation_clarity*20)+{$rand}), 100) AS arg_clarity,
		LEAST(ROUND((c.argumentation_fragment*20)+{$rand}), 100) AS arg_fragment, 
		LEAST(ROUND((c.argumentation_framing*20)+{$rand}), 100) AS arg_framing, 
		LEAST(ROUND((c.argumentation_relevance_scenario*20)+{$rand}), 100) AS arg_relevance_scenario, 
		LEAST(ROUND((c.argumentation_repetitive*20)+{$rand}), 100) AS arg_repetitive, 
		LEAST(ROUND((c.argumentation_on_point*20)+{$rand}), 100) AS arg_on_point, 
		LEAST(ROUND(IF(c.argumentation_conciseness > 0, 
			 c.argumentation_conciseness*20, c.argumentation_concise_overly*20)+{$rand}), 100) AS arg_conciseness, 
		LEAST(ROUND((c.argumentation_jargon*20)+{$rand}), 100) AS arg_jargon, 
		LEAST(ROUND((c.argumentation_spelling*20)+{$rand}), 100) AS arg_spelling,
		LEAST(ROUND((c.argumentation_capitalization*20)+{$rand}), 100) AS arg_capitalization,
		LEAST(ROUND((c.argumentation_punctuation*20)+{$rand}), 100) AS arg_punctuation,
		LEAST(ROUND((c.argumentation_other_grammar*20)+{$rand}), 100) AS arg_other_grammar,
		
		LEAST(ROUND(c.code451), 100) AS P_TAKEN_QUALITY, 
		LEAST(ROUND(c.code452), 100) AS P_SOUGHT_QUALITY, 
		ROUND(c.code453, 1) AS P_COORD_SCORE,
		ROUND(c.code454, 1) AS CONTEXT_SCORE, 
		ROUND(c.code455, 1) AS DM_SCORE, 
		ROUND(c.code456, 1) AS COLLAB_SCORE,

		/* These are only temporarily present in the all-instruments version of this query.
		What a resource hogging mess this page is. */
		comp_ptaken.average AS COMPARISON_PTAKEN,
		comp_psought.average AS COMPARISON_PSOUGHT,
		comp_pcoord.average AS COMPARISON_PCOORD,
		comp_context.average AS COMPARISON_CONTEXT,
		comp_dmprocess.average AS COMPARISON_DMPROCESS,
		comp_collab.average AS COMPARISON_COLLAB,

		ROUND(c.code491,2) AS LLRA_LEADQUAL,
		ROUND(c.code492,2) AS LLRA_LEADTHEMES,
		ROUND(c.code491,2) AS LRJA_THEMES,
		ROUND(c.code491,2) AS LDPA_THEMES,
		ROUND(c.code493,2) AS LIMA_THEMES,
		ROUND(c.code491,2) AS LERA_THEMES,
		ROUND(c.code491,2) AS SMA_THEMES,
		ROUND(sd.result_avg_page1,1) AS SMS_SCORE,
		ROUND(c.code481,1) AS SMJ_SCORE_STUDENT,
		ROUND(c.code482,1) AS SMJ_SCORE_TEACHER_ALL,
		ROUND(c.code483,1) AS SMJ_SCORE_TEACHER_TONLY
	FROM la_data d
		LEFT JOIN {$code_table} c ON d.lakey = c.lakey
		LEFT JOIN la_scores s ON d.lakey = s.lakey
		LEFT JOIN la_dilemmas di ON d.dilemmakey = di.dilemmakey
		LEFT JOIN la_survey_data sd ON d.lakey = sd.lakey
		LEFT JOIN demogs_man_level dm ON d.manlevelkey = dm.manlevelkey
		LEFT JOIN demogs_man_level_general dmg ON dm.man_level_number = dmg.man_level_number

		/* Joins to fetch a simple comparison value, the average for your management level.
		Messy I know. */
		LEFT JOIN man_levels_theme_averages comp_ptaken ON 
			dmg.manlevelgeneralkey = comp_ptaken.manlevelgeneralkey 
			AND d.instrument_id IN ('LDMA', 'LDMA_JOURNAL') 
			# AND d.test_time = comp_ptaken.test_time 
			AND comp_ptaken.theme_name = 'perspective_taking'
		LEFT JOIN man_levels_theme_averages comp_psought ON 
			dmg.manlevelgeneralkey = comp_psought.manlevelgeneralkey 
			AND d.instrument_id IN ('LDMA', 'LDMA_JOURNAL') 
			# AND d.test_time = comp_psought.test_time 
			AND comp_psought.theme_name = 'perspective_seeking'
		LEFT JOIN man_levels_theme_averages comp_pcoord ON 
			dmg.manlevelgeneralkey = comp_pcoord.manlevelgeneralkey 
			AND d.instrument_id IN ('LDMA', 'LDMA_JOURNAL') 
			# AND d.test_time = comp_pcoord.test_time 
			AND comp_pcoord.theme_name = 'perspective_coordination'
		LEFT JOIN man_levels_theme_averages comp_context ON 
			dmg.manlevelgeneralkey = comp_context.manlevelgeneralkey 
			AND d.instrument_id IN ('LDMA', 'LDMA_JOURNAL') 
			# AND d.test_time = comp_context.test_time 
			AND comp_context.theme_name = 'contextual_thinking'
		LEFT JOIN man_levels_theme_averages comp_dmprocess ON 
			dmg.manlevelgeneralkey = comp_dmprocess.manlevelgeneralkey 
			AND d.instrument_id IN ('LDMA', 'LDMA_JOURNAL') 
			# AND d.test_time = comp_dmprocess.test_time 
			AND comp_dmprocess.theme_name = 'decision_making_process'
		LEFT JOIN man_levels_theme_averages comp_collab ON 
			dmg.manlevelgeneralkey = comp_collab.manlevelgeneralkey 
			AND d.instrument_id IN ('LDMA', 'LDMA_JOURNAL') 
			# AND d.test_time = comp_collab.test_time 
			AND comp_collab.theme_name = 'collaborative_capacity'

	WHERE (d.finalized %s OR d.lakey=%s) AND d.finalized <> 3 AND d.userkey=%s 
		{$filter_instrument_id} 
	GROUP BY d.lakey 
	ORDER BY d.test_time", 
		// if you're the test taker, include only other released records. Otherwise include finalized.
		($row_rsRegistrants['userkey'] == $_SESSION['log_userkey'] ? " = 1" : " >= 1"),
 		SQLstr($lakey, 'int'),
		SQLstr($row_rsRegistrants['userkey'], 'int'));
// topher($query_chartResultsByTestTime); topher();
$rsChartResultsByTestTime = mysql_query($query_chartResultsByTestTime) or die(mysql_error());
$totalRows_rsChartResultsByTestTime = mysql_num_rows($rsChartResultsByTestTime);



$query_chartLectByManLevel = sprintf("SELECT mlg.man_level_general_name AS MAN_LEVEL, 
	COUNT(d.lakey) AS N, 
	ROUND( AVG( s.lasnumber_1 ), 2) AS LASNUMBER 
	FROM la_data d 
	JOIN la_scores s ON d.lakey = s.lakey
	JOIN registrants r ON d.userkey = r.userkey
	JOIN demogs_man_level_general mlg ON d.manlevel_gen_adjusted = mlg.manlevelgeneralkey 
	WHERE d.finalized >= 1 
	GROUP BY mlg.man_level_number ORDER BY mlg.man_level_number", 
			SQLstr($userkey, "int"));
$rsChartLectByManLevel = mysql_query($query_chartLectByManLevel, $Assessment) or die("rsChartLectByManLevel: ".mysql_error());

$query_rsChartOldLect = sprintf("SELECT man_level AS MAN_LEVEL, n AS N, lasnumber AS LASNUMBER 
	FROM la_ldma_olddata ORDER BY man_level_number ", 
		SQLstr($userkey, "int"));
$rsChartOldLect = mysql_query($query_rsChartOldLect, $Assessment) or 
	die("rsChartOldLect: ".mysql_error());
	







// generate link and hidden div for "debrief" content
function debrief ($row_name) { 
	global $is_client, $boilerplate;
	if ($is_client AND $boilerplate[$row_name] <> "") { ?>
    <a class='debrief_link'>debriefing this tab</a>
    <div class='debrief_content'><?php echo $boilerplate[$row_name]; ?></div><?php 
	}
}








?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- InstanceBegin template="/Templates/assess3.dwt.php" codeOutsideHTMLIsLocked="false" -->

<head>

<link href='https://fonts.googleapis.com/css?family=Lato:100,300,400,700,900,100italic,300italic,400italic,700italic,900italic' rel='stylesheet' type='text/css'>


<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<!-- InstanceBeginEditable name="doctitle" -->
<title>DTS: <?php echo $instrument_id_name; ?> Report</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->


<script src="../includes/jquery.js" type="text/javascript"></script>
<script src="../includes/jquery.ui.js" type="text/javascript"></script>
<script src="../includes/jquery.tools.min.js" type="text/javascript"></script>
<script src="../includes/highcharts.js" type="text/javascript"></script>
<script src="../includes/highcharts_export.js" type="text/javascript"></script>


<script src="../SpryAssets/SpryTabbedPanels.js" type="text/javascript"></script>
<script src="../SpryAssets/SpryTooltip.js" type="text/javascript"></script>
<script src="../SpryAssets/SpryCollapsiblePanel.js" type="text/javascript"></script>
<link href="../SpryAssets/SpryTabbedPanelsVertical.css" rel="stylesheet" type="text/css" />
<link href="../SpryAssets/SpryTooltip.css" rel="stylesheet" type="text/css" />


<script type="text/javascript">
$(document).ready(function(){
	
	$('.floating').draggable({ cancel: ".floating_content" });
	
	// CLOSE a floating window 
	$('.floating_close').click(function(){
		$(this).parent().parent().hide(250);
	});
	
	// Clicking What's Next shows the floating window
	$('.whats_next_link').click(function(){
		$('#floating').hide(250);
		var whatsnext_n = $(this).parent().parent().find('.whats_next_content').length;
		if (whatsnext_n == 1) { 
			$('#floating_content').html( $(this).parent().parent().find('.whats_next_content').html() );
		} else {
			$('#floating_content').html( $(this).parent().next('.whats_next_content').html() );
		}
		$('#floating').show(250);
		$('#floating_content').scrollTop(0);
	});
	
	// Clicking a Debrief link shows the floating window
	$('.debrief_link').click(function(){
		$('#debrief_window').hide(250);
		$('#debrief_window_content').html( $(this).next().html() );
		$('#debrief_window').show(250);
		$('#debrief_window_content').scrollTop(0);
	});
	
	$('.hotspot').tooltip({
		position: 'bottom center', 
		// offset: [-150, -50], 
		effect: 'fade', 
		fadeInSpeed: 100,
		fadeOutSpeed: 100,
		predelay: 300,
		delay:300,
		layout: '<span/>',
		events: {
			def: 'mouseover, mouseleave'
		}
	}); 
	
	// Add instrument-specific class to each <a> link
	$('a').addClass('a-<?php echo strtolower($instrument_id_base); ?>');
	
});
</script>

<style type="text/css">
#mantable {	width: 310px;
	float: right;
	margin: 0px;
	height: auto;
}
#mantable2 {	width: 310px;
	float: left;
	margin: 0px;
}

.TableBarGraph {
	line-height: 0px;
	margin-bottom: 0px;
	padding-bottom: 4px;
	width: 100%;
}

.TableBarGraph tr {
	padding-top: 4px;
	padding-bottom: 4px;
}

.twoColFixRtHdr #container #mainContent #TabbedPanels1 .TabbedPanelsContentGroup .TabbedPanelsContent.TabbedPanelsContentVisible table tr td #CollapsiblePanel1 {
	margin-right: 0px;
	margin-left: 0px;
}


.twoColFixRtHdr #container #mainContent #TabbedPanels1 .TabbedPanelsContentGroup .TabbedPanelsContent.TabbedPanelsContentVisible table tr td .CollapsiblePanel {
	margin-top: 30px;
	margin-bottom: 20px;
	margin-right: 0px;
	margin-left: 0px;
}

.TabbedPanelsContent h2 {
	font-weight: 700; 
}


/* For the What's Next floating boxes */

.whats_next_link { cursor: pointer; }
<?php if ($printable) { ?>
	.whats_next_content .current { display: none; }
<?php } else { ?>
	.whats_next_content { display:none; }
<?php } ?>

.floating {
	/* must be initially hidden */
	display:none;
	width: 475px;
	position: fixed;
	top: 5%; right: 5%;
	/* place overlay on top of other elements */
	z-index:9999;
	/* styling */
	background-color: #fff; /* dedede */
	border: 1px solid #666;
	padding: 15px;
	/* CSS3 styling for latest browsers */
	-moz-box-shadow:0 0 20px 5px #666;
	-webkit-box-shadow: 0 0 20px #666;
	-moz-border-radius: 5px;
	border-radius: 5px;
}
.floating_header {
	padding: 2px;
	margin-bottom: 5px;
	cursor: move; 
	background-color: #cccccc;
	border: solid 1px #cccccc;
	-moz-border-radius: 5px;
	border-radius: 5px;
	font-weight: 400;
	color: #FFF;
	padding-left: 4px;
}
.floating_close {   
	float: right;
	padding-left: 5px;
	padding-right: 5px; 
	cursor: pointer;
	font-size: 16px; 
}
.floating_content { 
	max-height: 475px; 
	overflow: auto;
}
.floating_content p { 
	padding-right: 10px; 
}

#debrief_window {
}

#debrief_window_content { 
}


.debrief_link { float: right; cursor: pointer; }
.debrief_content { display: none; }



/* Jquery tooltips */
.tooltip {
	display:none;
	font-size:90%;
	/* color:#000; */
	padding-top: 8px;
	padding-right: 8px;
	padding-bottom: 8px;
	padding-left: 10px;
	-moz-box-shadow: 2px 2px 8px #666;
	-webkit-box-shadow: 2px 2px 8px #666;
	box-shadow: 2px 2px 8px #666;
	z-index: 999;
	background-color: #FFFFCC;
	min-width: 200px;
	max-width: 300px;
	line-height: 18px;
	font-style: normal;
	font-weight: normal;
}
.hotspot {
	cursor:help;
	color: #007376;
}




/* Colors for H2 and the tabbed panel background */
<?php 
$instrColor = $chart_colors[$instrument_id_base];
$instrColor = substr($instrColor, 0, strpos($instrColor, " "));
if ($instrColor <> "") { 
	?>
	
	
	.TabbedPanelsContent h2 {
		color: #<?php echo $instrColor; ?>;
	}
	
	.VTabbedPanels .TabbedPanelsTabSelected {
		background-color: #<?php echo $instrColor; ?>;
	}

	<?php 
} ?>

</style>
<link href="../SpryAssets/SpryCollapsiblePanel.css" rel="stylesheet" type="text/css" />
<!-- InstanceEndEditable -->

<?php
$img_header = "DTSheader880.jpg";
if (isset($_SESSION['instrument_id'])) { $img_header = $_SESSION['instrument_id']."header880.jpg"; }
?>

<style type="text/css"> 
<!-- 
body  {
	margin: 0; /* it's good practice to zero the margin and padding of the body element to account for differing browser defaults */
	padding: 0; /* this centers the container in IE 5* browsers. The text is then set to the left aligned default in the #container selector */
	color: #333333;
	background-color: #FFF;
}
.twoColFixRtHdr #header {
	background-image: url(/_images/skin/backgrounds/<?php echo $_SESSION['instrument_id']; ?>_background.png);
	background-repeat: repeat;
	background-color: #93CCCB;
	height: 74px;
} 
--> 
--> 
</style>
<!--[if IE 5]>
<style type="text/css"> 
/* place css box model fixes for IE 5* in this conditional comment */
.twoColFixRtHdr #sidebar1 { width: 220px; }
</style>
<![endif]--><!--[if IE]>

<style type="text/css"> 
/* place css fixes for all versions of IE in this conditional comment */
.twoColFixRtHdr #sidebar1 { padding-top: 30px; }
.twoColFixRtHdr #mainContent { zoom: 1; }
/* the above proprietary zoom property gives IE the hasLayout it needs to avoid several bugs */
</style>
<![endif]-->

<link href="/_css/template.css" rel="stylesheet" type="text/css" />
<link href="/_css/template_assess3.css" rel="stylesheet" type="text/css" />

</head>

<body class="twoColFixRtHdr">

<div id="header">
	<?php if (isset($_SESSION['instrument_id'])) { ?>
    <div id="header_logo">
      <p class="uppercase"><?php echo str_replace("_", " ", $_SESSION['instrument_id']); ?></p>
    </div>
	<?php } else { ?>
  	<div class="header1_column1"></div>
  <?php } ?>
</div>

<div id="menu1">
  <h3>
				<?php include("../_includes/navigation/header_1a.html"); ?>
				<!-- InstanceBeginEditable name="ExtraMenuItem1" --><!-- InstanceEndEditable -->&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
					<?php if (isset($_SESSION['log_firstname'])) {  ?>
  					You are logged in as <?php echo $_SESSION['log_firstname']." ".$_SESSION['log_lastname'];  } ?></h3>
</div>
	
<div id="container">
<p><!-- InstanceBeginEditable name="menu3" -->
		<? if ($mode == "checkreport") { include '../la_coding/code_quickmenu.php'; } ?>
	<!-- InstanceEndEditable --></p>
<div id="mainContent"> <!-- InstanceBeginEditable name="main" -->
    
    <h1><? echo $instrument_id_name; ?> REPORT FOR <? 
			// for all scorers and coders, the test taker's name is hidden.
			if ($mode == "checkreport") { echo $row_rsRegistrants['userkey']; } 
			else if ($row_rsRegistrants['firstname'] <> $row_rsRegistrants['lastname']) 
			{ echo strtoupper($row_rsRegistrants['firstname']." ".$row_rsRegistrants['lastname']); } 
			else { echo strtoupper($row_rsRegistrants['firstname']); }
			?>: TEST TIME <? echo $row_rsRegistrants['test_time']; ?>
		</h1>
    
		<div id="CollapsiblePanel2" class="CollapsiblePanel">
    	<? if ($instrument_id <> "SMS" AND mysql_num_rows($rsLaDataOverTime) > 1) { ?>
		  <div class="CollapsiblePanelTab">SELECT A DIFFERENT REPORT  (click to view)</div>
		  <div class="CollapsiblePanelContent">
      <table border="0">
        <tr class="tablehead_knockout">
          <th>Date completed</th>
          <th>Test time</th>
          <? if ($type <> "journal" OR $row_rsLaDataOverTime['code491'] > 0) { ?>
            <th>Lectical score</th>
          <? } ?>
          <? if (checkModule('argumentation')) { ?>
          	<th>Argumentation</th>
            <? if ($row_rsLaDataOverTime['argumentation_scale_mechanics'] > 0) { ?>
          	<th>Mechanics</th>
            <? } // ?>
          <? } // ?>
          <? if (checkModule('perspectives')) { ?>
            <th>Perspectives taken score</th>
            <th>Perspectives sought score</th>
          <? } ?>
          <th><div align="center">View</div></th>
        </tr>
        <? 
        do { 
          ?>
          <tr>
            <td align="center"><? 
              echo date('Y-m-d', strtotime($row_rsLaDataOverTime['date_completed'])); ?></td>
            <td align="center"><? echo $row_rsLaDataOverTime['test_time']; ?></td>
          <? if ($type <> "journal" OR $row_rsLaDataOverTime['code491'] > 0) { ?>
            <td align="center"><? 
              $las = $row_rsLaDataOverTime['lasnumber_1'];
							if ($las == "") { $las = $row_rsLaDataOverTime['code491']; }
							$las .= (strpos($las, ".") ? "" : ".0"); 
              if ($las > 0) { echo $las; } ?>
            </td>
          <? } ?>
          <? if (checkModule('argumentation')) { 
            $arg = round($row_rsLaDataOverTime['argumentation_overall'], 1);
            // Sometimes the rounding function removes the decimal point for "##.0" values. 
            // If so, re-add ".0" for the argumentation score.
            $arg .= (substr_count($arg, ".") == 0 ? ".0" : "");
            ?>
            <td align="center"><? echo $arg; ?></td>
            <? if ($row_rsLaDataOverTime['argumentation_scale_mechanics'] > 0) { 
							$mech = round($row_rsLaDataOverTime['argumentation_scale_mechanics'], 1);
							$mech .= (substr_count($mech, ".") == 0 ? ".0" : ""); ?>
          		<td align="center"><? echo $mech; ?></td>
            <? } // ?>
          <? } ?>
          <? if (checkModule('perspectives')) { ?>
            <td align="center"><? 
							$score = round($row_rsLaDataOverTime['P_TAKEN_QUALITY']); 
							if ($score > 0) { echo $score; } ?>
            </td>
            <td align="center"><? 
							$score = round($row_rsLaDataOverTime['P_SOUGHT_QUALITY']);
							if ($score > 0) { echo $score; } ?>
            </td>
          <? } ?>
            <td align="center">
            	<a href="report_individual.php?lakey=<? echo $row_rsLaDataOverTime['lakey']; ?>">
              view</a>
            </td>
          </tr>
       <? } while ($row_rsLaDataOverTime = mysql_fetch_assoc($rsLaDataOverTime)); 
         
        // Reset rsLaDataOverTime - this recordset is re-used for the argumentation bar charts.
        $rows = mysql_num_rows($rsLaDataOverTime);
        if ($rows > 0) 
        { mysql_data_seek($rsLaDataOverTime, 0);
          $row_rsLaDataOverTime = mysql_fetch_assoc($rsLaDataOverTime); 
        } ?>
      </table>
      
      
      </div>
      <? } // ENDIF: hide this div for certain instruments ?>
	  </div>
    <script type="text/javascript">
		var CollapsiblePanel2 = new Spry.Widget.CollapsiblePanel("CollapsiblePanel2"<? 
		// Have to manually set each collapsible panel to be open by default in print view. 
		if ($printable) {
				?>, {contentIsOpen:true}<?
		} ?>);
		</script>
    
    
	<? // **** TURN OFF LDMA REPORTS
	// (REMOVED this block. Report is back online.)
	if ($instrument_id_base == 'LDMA' AND !WA_Auth_RulePasses('Logged in as coder') AND false) { ?>
		<div class="box width-600">
		  <span class='red'>The LDMA is down for maintenance.</span> 
		  We're sorry for the inconvenience. We expect to be back online on Monday.
    </div>
		<?
		$instrument_id = '';
		$instrument_id_base = '';
		$module = array();
	} ?>
   


	<? if ($old_imported AND $instrument_id <> "LSUA") { ?>
		<div class="box width-600">
		  
    	<p class="ldma">This assessment was not coded with the current coding system and the report is incomplete. To view the original report, <a href="../scoring_<? echo strtolower($instrument_id_base); ?>/<? 
			echo strtolower($instrument_id_base); ?>report.php?ldmakey=<? echo $lakey; ?>&lsuakey=<? echo $lakey; 
			?>&lasname=<? if ($lasnumber_1 > 0) {
				// convert LAS number into LAS 4-phase part 
				$las_rounded = round($lasnumber_1, 1);
				$phase_top = array( 1 => 0.1, 2 => 0.4, 3 => 0.7, 4 => 0.9 );
				$part = $las_rounded - floor($las_rounded);
				$i = 1; while ($part > $phase_top[$i] AND $i < 4) { $i ++; }
				echo floor($las_rounded).":".$i;
			} ?>">click here</a>.</span>
    </p></div>
	<? } ?>
   
	<?
/* A message for those logged in as coders / scorers vetting the report */ 
	$check_col = 'coder_check_report_'.strtolower($instrument_id_base);
	
	if ($mode == "checkreport" AND isset($boilerplate[$check_col])) { 
		$text = $boilerplate[$check_col];
		if ($text <> "") { ?>
			<div class="box width-800"><? echo $text; ?></div><? 
		}
	} ?>    

    
		<? 
    if ($lasnumber_1 == 0 AND $type <> "journal" AND 0) {
      // $lasnumber_1 is set to 0 if no valid score was found. 
      // The page will load semi-normally, although several important queries will fail.
      ?>
      <div class="box width-600"><p><strong class="redbold">Note:</strong> This performance was not scored, or we could not find a meaningful LAS score associated with the performance. Some sections of the report  will not display properly.</p></div>
      <? 
    } ?>
    
    <p>Click on a tab to view your results. | 
    <!-- Dynamic link into / out of printer-friendly page -->
    <? 
				if ($printable) { 
					?><a href="report_individual.php?<? echo $_SERVER['QUERY_STRING']; ?>&printerv=no">
          view page by sections</a>
      <? } else { 
					?><a href="report_individual.php?<? echo $_SERVER['QUERY_STRING']; ?>&printerv=yes">
          view printer-friendly page</a>
      <? } ?> | 
			<? contactUsForHelp("contact us for help","Lakey for the report: ".$lakey); ?> | 
      <a href="report_individual.php?<? echo $_SERVER['QUERY_STRING']; ?>" class="red">
      	if the page looks wrong, click here</a></p>
    
    
    <!-- THE TABBED PANELS WHICH HOLD THE MAIN PAGE CONTENT -->
    
    <div id="TabbedPanels1" class="VTabbedPanels">
      <? /* If you block out the <ul> which serves as the TabbedPanel table of contents, the entire TabbedPanels widget breaks gracefully and the page unfolds in nice printer-friendly format. */
			if (!$printable) { ?>
      <ul class="TabbedPanelsTabGroup">
        <? 
				// All tabs of the report are checked to see if they should be run / shown in this version of the report. The criteria are defined in the header above the queries.
				
				if (isset($boilerplate['report_intro_'.strtolower($instrument_id_base)])) { ?>
        	<li class="TabbedPanelsTab">About this report</li>
        <? } if (checkModule('ldma_reasoning') AND $lasnumber_1 > 0) { ?>
          <li class="TabbedPanelsTab">Your reasoning</li>
        <? } if (checkModule('ldma_reasoning_phase') AND $lasnumber_1 > 0) { ?>
        	<li class="TabbedPanelsTab">Reasoning in phase <? echo $lasnumber_1; ?></li>
        <? } if (checkModule('lsua_reasoning') AND $lasnumber_1 > 0) { ?>
          <li class="TabbedPanelsTab">Your reasoning</li>
        <? } if (checkModule('lsua_reasoning_rel_phase')) { ?>
        	<li class="TabbedPanelsTab">Reasoning about relationships</li>
        <? } if (checkModule('lsua_reasoning_self_phase')) { ?>
        	<li class="TabbedPanelsTab">Reasoning about the self</li>
        <? } if (checkModule('llra_qualities')) { ?>
          <li class="TabbedPanelsTab">Leader qualities</li>
        <? } if (checkModule('ldma_strengths') AND $row_rsStrengths['cs1'] <> "") { ?>
          <li class="TabbedPanelsTab">Strengths &amp; recommendations</li>
        <? } if (checkModule('strengths_written')) { ?>
          <li class="TabbedPanelsTab">Strengths &amp; recommendations</li>
        <? } if (checkModule('suggestions_lsua') AND $lasnumber_1 > 0) { ?>
        	<li class="TabbedPanelsTab">General suggestions for growth</li>
        <? } if (checkModule('lsua_strengths') AND $tabtext_lsua_strengths <> "") { ?>
          <li class="TabbedPanelsTab">Strengths &amp; recommendations</li>
        <? }  if (checkModule('llra_themes')) { ?>
        	<li class="TabbedPanelsTab">Leadership themes</li>
          <?
					// for each LLRA theme, if text exists for that theme, create a tab for it.
					for ($cur_theme = 1; $cur_theme <= 7; $cur_theme ++) {
						if ($llra_theme_tabtext[$cur_theme] <> "") { 
							?><li class="TabbedPanelsTab"> &nbsp; &nbsp;- <? 
								echo $llra_theme_titles[$cur_theme]; 
								if (0) { ?><em>LLRA THEME tabs</em><? } // make this easier to find in DW
							?></li><?
						}
					} ?>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- summary<? 
						if (0) { ?><em>(LLRA charts)</em><? } ?></li>
            
        <? }  if (checkModule('lrja_themes')) { 
					// for each LRJA theme, if text exists for that theme, create a tab for it.
					for ($cur_theme = 1; $cur_theme <= 5; $cur_theme ++) {
						if ($lrja_theme_tabtext[$cur_theme] <> "") { 
							?><li class="TabbedPanelsTab"> &nbsp; &nbsp;- <? 
								echo $lrja_theme_titles[$cur_theme]; 
								if (0) { ?><em>LRJA THEME tabs</em><? } // make this easier to find in DW
							?></li><?
						}
					} ?>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- summary<? 
						if (0) { ?><em>(LRJA charts)</em><? } ?></li>
            
        <? }  if (checkModule('ldpa_themes')) { 
					// for each LDPA theme, if text exists for that theme, create a tab for it.
					for ($cur_theme = 1; $cur_theme <= 9; $cur_theme ++) {
						if ($ldpa_theme_tabtext[$cur_theme] <> "") { 
							?><li class="TabbedPanelsTab"> &nbsp; &nbsp;- <? 
								echo $ldpa_theme_titles[$cur_theme]; 
								if (0) { ?><em>LDPA THEME tabs</em><? } // make this easier to find in DW
							?></li><?
						}
					} ?>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- summary<? 
						if (0) { ?><em>(LDPA charts)</em><? } ?></li>
            
        <? }  if (checkModule('lima_themes')) { 
					// for each LIMA theme, if text exists for that theme, create a tab for it.
					for ($cur_theme = 1; $cur_theme <= 8; $cur_theme ++) {
						if ($lima_theme_tabtext[$cur_theme] <> "") { 
							?><li class="TabbedPanelsTab"> &nbsp; &nbsp;- <? 
								echo $lima_theme_titles[$cur_theme]; 
								if (0) { ?><em>LIMA THEME tabs</em><? } // make this easier to find in DW
							?></li><?
						}
					} ?>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- summary<? 
						if (0) { ?><em>(LIMA charts)</em><? } ?></li>
            
        <? }  if (checkModule('lera_themes')) { 
					// for each LERA theme, if text exists for that theme, create a tab for it.
					for ($cur_theme = 1; $cur_theme <= 8; $cur_theme ++) {
						if ($lera_theme_tabtext[$cur_theme] <> "") { 
							?><li class="TabbedPanelsTab"> &nbsp; &nbsp;- <? 
								echo $lera_theme_titles[$cur_theme]; 
								if (0) { ?><em>LERA THEME tabs</em><? } // make this easier to find in DW
							?></li><?
						}
					} ?>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- summary<? 
						if (0) { ?><em>(LERA charts)</em><? } ?></li>
            
        <? } if (checkModule('lera_moralemotions')) { ?>
          <li class="TabbedPanelsTab">Moral emotions</li>
        <? } if (checkModule('sma_themes')) { ?>
        	<li class="TabbedPanelsTab">Your reasoning <? if (0) { ?><em>(SMA)</em><? } ?></li>
        	<li class="TabbedPanelsTab">Your score <? if (0) { ?><em>(SMA)</em><? } ?></li>
        <? } if (checkModule('sms_score')) { ?>
        	<li class="TabbedPanelsTab">Your scores <? if (0) { ?><em>(SMS)</em><? } ?></li>
        	<li class="TabbedPanelsTab">What scores mean <? if (0) { ?><em>(SMS)</em><? } ?></li>
        <? } if (checkModule('smj_scores')) { ?>
        	<li class="TabbedPanelsTab">Your scores <? if (0) { ?><em>(SMJ)</em><? } ?></li>
          <? if ($codes['coded_1'] == 1) { ?>
        		<li class="TabbedPanelsTab">Teacher comments <? if (0) { ?><em>(SMJ)</em><? } ?></li>
          <? } // ?>
        <? } if (checkModule('suggestions_ldma') AND $lasnumber_1 > 0) { ?>
        	<li class="TabbedPanelsTab">General suggestions for growth</li>
        <? } if (checkModule('perspectives')) { ?>
        	<li class="TabbedPanelsTab">Perspectives</li>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- taking them</li>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- seeking them</li>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- coordinating them</li>
          <li class="TabbedPanelsTab">Collaborative capacity</li>
        <? } if (checkModule('context')) { ?>
          <li class="TabbedPanelsTab">Contextual thinking</li>
        <? } if (checkModule('decision_making')) { ?>
          <li class="TabbedPanelsTab">Decision-making process</li>
        <? } if (checkModule('argumentation')) { ?>
        	<li class="TabbedPanelsTab">Argumentation</li>
        <? } if (checkModule('implicit_explicit')) { ?>
          <li class="TabbedPanelsTab">Implicit vs. explicit knowledge</li>
        <? } if (checkModule('levels_tasks')) { ?>
          <li class="TabbedPanelsTab">Levels &amp; tasks</li>
        <? } if (checkModule('management') AND $lasnumber_1 > 0) { ?>
          <li class="TabbedPanelsTab">Management</li>
        <? } if (checkModule('lsua_survey') AND 
										($totalRows_rsOptimism > 0 OR $totalRows_rsCharacter > 0)) { ?>
          <li class="TabbedPanelsTab">Survey results</li>
          <? if ($totalRows_rsOptimism > 0) { ?>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- optimism </li>
          <? } ?>
          <? if ($totalRows_rsCharacter > 0) { ?>
          <li class="TabbedPanelsTab"> &nbsp; &nbsp;- character </li>
          <? } ?>
        <? } if (checkModule('mistakes')) { ?>
        	<li class="TabbedPanelsTab">Learning and mistakes</li>
        <? } if (checkModule('essays')) { ?>
        	<li class="TabbedPanelsTab">Responses</li>
        <? } ?>
      </ul>
  <? } // END IF: if page is NOT in printer-friendly mode ?>
  
  
  
  <div class="TabbedPanelsContentGroup">
        
		<? if (isset( $boilerplate['report_intro_'.strtolower($instrument_id_base)])) { ?>
    <div class="TabbedPanelsContent">
      
      <? debrief('report_indiv_debrief_tab_about'); ?>
      
			<? 
      // SPECIAL COMMENTS: that this was not best effort, you used outside sources, etc.
      if ($codes['special_comment_text'] <> "") { 
        echo "
        	<br class='clearfloat' />
        	<div class='box'>".
					linknewtab($codes['special_comment_text'])."</div>";
      }
      
      // Display the boilerplate row for this instrument_id.
      if (isset( $boilerplate['report_intro_'.strtolower($instrument_id_base)] )) { 
        $text = $boilerplate['report_intro_'.strtolower($instrument_id_base)];
        $text = str_replace("[SCORE]", $lasnumber_1, $text);
        echo $text;
      } else {
        error_log("ERROR - no 'about' boilerplate was found for the report, record #".$lakey, 
                  1, "service@lectica.org");
      }
      
      
      if ($instrument_id_base == "LLRA" OR $instrument_id_base == "LRJA") { 
        echo $boilerplate['caveat_limits_of_assessment'];
      } ?>
      
      <? if ($instrument_id == "SMJ" AND $codes['coded_1'] <> 1) { ?>
        <? echo $boilerplate['report_smj_your_other_results']; ?>
      <? } // ?>
      
      <? // Links for Mindfulness suite users, to their other results
      $links = "";
      if ($instrument_id == "SMS" OR $instrument_id == "SMJ") { 
        $sql_rsCountSma = sprintf("SELECT lakey FROM la_data 
          WHERE instrument_id = 'SMA' AND userkey = %s AND finalized = 1 
          ORDER BY date_completed DESC",
            SQLstr($userkey, 'int'));
				$rsCountSma = mysql_query($sql_rsCountSma) or die("ERROR fetching SMA results.");
        $row = mysql_fetch_assoc($rsCountSma);
        if ($row['lakey'] > 0) { 
          if ($links <> "") { $links .= " | "; }
          $links .= "<a href='report_individual.php?lakey={$row['lakey']}'>SMA</a>";
        } 
      }
      if ($instrument_id == "SMS" OR $instrument_id == "SMA") { 
        $sql_rsCountSmj = sprintf("SELECT lakey FROM la_data 
          WHERE instrument_id = 'SMJ' AND userkey = %s AND finalized = 1 
          ORDER BY date_completed DESC",
            SQLstr($userkey, 'int'));
				$rsCountSmj = mysql_query($sql_rsCountSmj) or die("ERROR fetching SMJ results.");
        $row = mysql_fetch_assoc($rsCountSmj);
        if ($row['lakey'] > 0) { 
          if ($links <> "") { $links .= " | "; }
          $links .= "<a href='report_individual.php?lakey={$row['lakey']}'>SMJ</a>";
        } 
      }
      if ($instrument_id == "SMJ" OR $instrument_id == "SMA") { 
        $sql_rsCountSms = sprintf("SELECT lakey FROM la_data 
          WHERE instrument_id = 'SMS' AND userkey = %s AND finalized = 1 
          ORDER BY date_completed DESC",
            SQLstr($userkey, 'int'));
				$rsCountSms = mysql_query($sql_rsCountSms) or die("ERROR fetching SMS results.");
        $row = mysql_fetch_assoc($rsCountSms);
        if ($row['lakey'] > 0) { 
          if ($links <> "") { $links .= " | "; }
          $links .= "<a href='report_individual.php?lakey={$row['lakey']}'>SMS</a>";
        } // 
      } // 
      if ($links <> "") { ?>
      <p>Your other mindfulness results: <? echo $links; ?></p>
      <p>
        <? } //
      ?>

      </p>
      <p>&nbsp;</p>
      
    </div>
        
       
    
		<? } if (checkModule('ldma_reasoning') AND $lasnumber_1 > 0) { ?>
    <div class="TabbedPanelsContent">														<!-- YOUR REASONING ABOUT #### SCENARIO -->
      <? debrief('report_indiv_debrief_tab_ldma_reasoning'); ?>
      
      <? $text = $boilerplate['report_reasoning_ldma'];
      $text = str_replace("[SCORE]", $lasnumber_1, $text);
      $text = str_replace("[DILEMMA_NAME]", $row_rsEssays['dilemma_name'], $text);
			
			for ($i = 1; $i <= 5; $i ++) { 
				$thing = "";
				$thing_next = "";
				if ($row_rsLaLdmaComments['ldma_probe'.$i] <> "") {
					$thing = $row_rsLaLdmaComments['ldma_probe'.$i];
					if ($row_rsLaLdmaComments['ldma_probe'.$i.'_next'] <> "") { 
						if (strpos($thing, "</p>")) {
							$thing = str_replace("</p>", " <a class='whats_next_link'>» what's next</a></p>", $thing);
						} else { $thing .= " <a class='whats_next_link'>» what's next</a>"; }
						$thing_next = "<p>".$row_rsLaLdmaComments['ldma_probe'.$i.'_next']."</p>";
						$activity = $boilerplate['report_indiv_whatsnext_activity'];
						$activity = str_replace("[SCORE]", $lasnumber_1, $activity);
						$activity = str_replace("[THEME]", "this topic", $activity);
						$thing_next .= $activity;
					}
				}
				$text = str_replace("[THING_{$i}]", linknewtab($thing), $text);
				$text = str_replace("[THING_{$i}_NEXT]", linknewtab($thing_next), $text);
			}
			
			// split separated by the chart
			$text = explode("[PHP]", $text);
      echo $text[0];
      
      highchart($rsChartResultsByTestTime, "Your Lectical score by test time", "", 
        "Test time", "Lectical score", "Time ", 
        array("TEST_TIME", "", "LAS_SCORE"), "", 10, 13,
        ""); ?>
      
			<? echo $text[1]; ?>
      
      <p>&nbsp;</p>
      
    </div>


									
		<? } if (checkModule('ldma_reasoning_phase') AND $lasnumber_1 > 0) { ?>
    <div class="TabbedPanelsContent">							<!-- REASONING IN PHASE ## -->
        
			<?
      $text = $boilerplate['report_ldma_reasoning'];
      $comment_general = str_replace("%s", $lasnumber_1, 
        $row_rsLaLdmaComments["ldma_las_general_description"]);
      $comment_perspectives = str_replace("%s", $lasnumber_1, 
        $row_rsLaLdmaComments["ldma_las_perspectives"]);
      $comment_solutions = $row_rsLaLdmaComments["ldma_las_response"];
      $comment_dmprocess = $row_rsLaLdmaComments["ldma_las_process"];
      // replace tags in the boilerplate with the prepared text
      $text = str_replace("[LASNUMBER]", $lasnumber_1, $text);
      $text = str_replace("[GENERAL]", $comment_general, $text);
      $text = str_replace("[PERSPECTIVES]", $comment_perspectives, $text);
      $text = str_replace("[SOLUTIONS]", $comment_solutions, $text);
      $text = str_replace("[DMPROCESS]", $comment_dmprocess, $text);
      echo linknewtab($text);
      ?>
            
      <p>&nbsp;</p>
    
    </div>
        
    
		
		<? } if (checkModule('lsua_reasoning') AND $lasnumber_1 > 0) { ?>
    <div class="TabbedPanelsContent">														<!-- YOUR REASONING (LSUA) -->
      <? debrief('report_indiv_debrief_tab_lsua_reasoning'); ?>
      
      <? 

      /* OLD code - referenced phase-depnedent lsua_las_comment. Theo wanted to remove this in favor of static boilerplate with a score tag.
      $text = $boilerplate['report_lsua_reasoning'];
			$comment = $row_rsLsuaCom['lsua_las_comment'];
			$comment_next = "";
			if ($comment <> "" AND $row_rsLsuaCom['lsua_las_comment_next'] <> "") { 
				$comment .= "<a class='whats_next_link'>» what's next</a>";
				$comment_next .= "<p>".$row_rsLsuaCom['lsua_las_comment_next']."</p>".
					$boilerplate['report_indiv_whatsnext_activity'];
				// SCORE tag in the whats_next field should display a score 0.2 level above the currently given score
      	$comment_next = str_replace("[SCORE]", $lasnumber_1 + 0.2, $comment_next);
			}
			$text = str_replace("[COMMENT]", $comment, $text);
			$text = str_replace("[COMMENT_NEXT]", $comment_next, $text);
      $text = str_replace("[THEME]", "the self", $text);
      */
      $text = $boilerplate['report_lsua_reasoning'];
      $text = str_replace("[SCORE]", $lasnumber_1, $text);
			
			// split separated by the chart
			$text = explode("[PHP]", $text);
      echo $text[0];
      
      highchart($rsChartResultsByTestTime, "Your Lectical score by test time", "", 
        "Test time", "Lectical score", "Time ", 
        array("TEST_TIME", "", "LAS_SCORE"), "", 10, 13,
        ""); ?>
      
			<? echo $text[1]; ?>
      
      <p>&nbsp;</p>
      
    </div>
    
    
    
    

        
		<? } if (checkModule('lsua_reasoning_rel_phase')) { ?>
    <div class="TabbedPanelsContent">							<!-- LSUA REASONING ABT RELATIONSHIPS IN PHASE ## -->
      <? debrief('report_indiv_debrief_tab_lsua_reasoning_rel'); 
			$text = $boilerplate['report_indiv_lsua_reasoning_rel'];
			
			for ($a = 1; $a <= 4; $a ++) { // for each relational aspect chosen
				$aspect_text = "";
				$aspect = $row_rsLsuaCom['aspect_'.$a];
				$comment = $row_rsLsuaCom['aspect_'.$a.'_comment'];
				$comment_next = $row_rsLsuaCom['aspect_'.$a.'_comment_next'];
				$whatsnext_div = "";
				if ($comment_next <> "" and $comment <> "") { 
					$comment .= " <a class='whats_next_link'>» what's next</a>";
					$activity = $boilerplate['report_indiv_whatsnext_activity'];
					$activity = str_replace("[THEME]", $aspect, $activity);
					$whatsnext_div .= "<h3>".ucfirst($aspect).": what's next</h3>
						<p>Test takers scoring at the next phase would see the following description:</p>
						<p>".ucfirst($comment_next)."</p>".
						$activity;
				}
				if ($comment <> "") { 
					$aspect_text = "<h3>".ucfirst($aspect)."</h3>
						<p>When you think about <em>your{$aspect}</em>, {$comment}</p>
						<div class='whats_next_content'>{$whatsnext_div}</div>";
				}
				$text = str_replace("[ASPECT {$a}]", $aspect_text, $text);
			}
			
			$true_comment = $row_rsLsuaCom['lsua_true_comment'];
			$true_whatsnext_div = "";
			if ($row_rsLsuaCom['lsua_true_comment_next'] <> "") { 
				$true_comment .= " <a class='whats_next_link'>» what's next</a>";
				$activity = $boilerplate['report_indiv_whatsnext_activity'];
				$activity = str_replace("[THEME]", "the true self", $activity);
				$true_whatsnext_div = "<h3>The true self: what's next</h3>
					<p>Test takers scoring at the next phase would see the following description:</p>
					<p>".ucfirst($row_rsLsuaCom['lsua_true_comment_next'])."</p>".
					$activity;
			}
			$text = str_replace("[TRUE COMMENT]", $true_comment, $text);
			$text = str_replace("[TRUE NEXT]", $true_whatsnext_div, $text);
			
			$ideal_comment = $row_rsLsuaCom['lsua_ideal_comment'];
			$ideal_whatsnext_div = "";
			if ($row_rsLsuaCom['lsua_ideal_comment_next'] <> "") { 
				$ideal_comment .= " <a class='whats_next_link'>» what's next</a>";
				$activity = $boilerplate['report_indiv_whatsnext_activity'];
				$activity = str_replace("[THEME]", "the ideal self", $activity);
				$ideal_whatsnext_div = "<h3>The ideal self: what's next</h3>
					<p>Test takers scoring at the next phase would see the following description:</p>
					<p>".ucfirst($row_rsLsuaCom['lsua_ideal_comment_next'])."</p>".
					$activity;
			}
			$text = str_replace("[IDEAL COMMENT]", $ideal_comment, $text);
			$text = str_replace("[IDEAL NEXT]", $ideal_whatsnext_div, $text);
			
			$text = str_replace("[SCORE]", $lasnumber_1, $text);
			
			echo linknewtab($text); ?>
      
      <p>&nbsp;</p>
    
    </div>
        
        
		<? } if (checkModule('lsua_reasoning_self_phase')) { ?>
    <div class="TabbedPanelsContent">																<!-- LSUA REASONING ABT SELF IN PHASE ## -->
      <? debrief('report_indiv_debrief_tab_lsua_reasoning_self'); 
			$text = $boilerplate['report_indiv_lsua_reasoning_self'];
			
			$perspective_labels = array("", "lsua_self_perspective", "lsua_social_perspective", 
																	"lsua_temporal_perspective", "lsua_self_evaluation", "lsua_self_growth");
			$perspective_titles = array("", "Perspective on yourself", "Social perspective", 
																	"Historical perspective", "Self evaluation", "Self growth");
			
			for ($a = 1; $a <= 5; $a ++) { // for each perspective on self 
				$label = $perspective_labels[$a];
				$title = $perspective_titles[$a];
				$comment = $row_rsLsuaCom[$label];
				$whatsnext_div = "";
				
				if ($row_rsLsuaCom[$label.'_next'] <> "" AND $comment <> "") { 
					$comment .= " <a class='whats_next_link'>» what's next</a>";
					$activity = $boilerplate['report_indiv_whatsnext_activity'];
					$activity = str_replace("[THEME]", strtolower($title), $activity);
					$whatsnext_div = "<h3>{$title}: what's next</h3>
						<p>Test takers scoring at the next phase would see the following description:</p>
						<p>".ucfirst($row_rsLsuaCom[$label.'_next'])."</p>".
						$activity;
				}
				
				$p_text = "";
				if ($comment <> "") { 
					$p_text = "<h3>{$title}</h3>
						<p>{$comment}</p>
						<div class='whats_next_content'>{$whatsnext_div}</div>";
				}
				
				$text = str_replace("[".strtoupper($label)."]", $p_text, $text);
			}
			
			$text = str_replace("[SCORE]", $lasnumber_1, $text);
			
			$struggles = "";
			for ($i = 1; $i <= 7; $i ++) { 
				if ($row_rsLsuaCom['lsua_struggle'.$i] <> "") { 
					$struggles .= "<li>".$row_rsLsuaCom['lsua_struggle'.$i]."</li>";
				}
			}
			$text = str_replace("[STRUGGLES]", $struggles, $text);
			echo linknewtab($text); ?>
       
      <p>&nbsp;</p>
    
    </div>
				
    
    
        
		<? } if (checkModule('llra_qualities')) { ?>
    <div class="TabbedPanelsContent">																<!-- LLRA: LEADER QUALITIES -->
      <? debrief('report_indiv_debrief_tab_llra_qualities'); ?>
      
      <? 
      $text = $boilerplate['report_llra_qualities_intro']; 
      $text = str_replace("[quality 1]", $row_rsEssays['menu01'], $text);
      $text = str_replace("[quality 2]", $row_rsEssays['menu02'], $text);
      $text = str_replace("[quality 3]", $row_rsEssays['menu03'], $text);
      $text = str_replace("[quality 4]", $row_rsEssays['menu04'], $text);
      echo $text;
      ?>
      
      <?
      
      $cur_theme = "";
      $means_coded = FALSE;	// tracks whether the "means" code for this quality, is present.
      
      $c = 1; $c_pad = str_pad($c, 3, '0', STR_PAD_LEFT);
      while ($c <= 100) {
        
        // the loop traverses the marked codes in the order of the code slots.
        // So I'm counting on the fact that the "means" slots will always be before "why" slots.
        if ($codes['code'.$c_pad] > 0) {
          // Fetch the text for this code marked in la_rubrics
          $row_rsRubric = mysql_fetch_assoc(mysql_query(
            "SELECT * FROM la_rubrics WHERE rubrickey = ".intval($codes['code'.$c_pad])));
          if ($row_rsRubric['theme_name'] <> $cur_theme) {
            if ($cur_theme <> "") { ?></p><? } // end the last paragraph, if one was present
            $cur_theme = $row_rsRubric['theme_name'];
            $cur_theme = str_replace("Ability to work with diverse perspectives", 
                                     "Working with perspectives", $cur_theme);
            ?><h3><? echo ucfirst($cur_theme); ?></h3>
            <p><?
            $means_coded = FALSE;
          }
          // Output this text into the existing paragraph.
          $stem = $row_rsRubric['rubric_stem'];
          $text = $row_rsRubric['rubric_item'];
          if (!strpos($stem, "important")) { $means_coded = TRUE; }
          // If the "XXX means..." text isn't present for this quality, the stem must be changed.
          if (!$means_coded) {
            $stem = str_replace("It", "<em>".ucfirst($cur_theme)."</em>", $stem);
          }
          $text = $stem." ".$text." ";
          
          // strip special characters from this text (mainly, anything between {tags})
          $text = preg_replace("/{[^{}]+}/", "", $text);
          $text = str_replace(array("*"), "", $text);
          
          echo linknewtab($text); 
        }
        
        $c ++; $c_pad = str_pad($c, 3, '0', STR_PAD_LEFT);
      }
      ?></p><? // end the final paragraph
      ?>
      
      <? 
      highchart($rsChartResultsByTestTime, "Leader qualities score by test time", "", 
              "Test time", "Leader qualities score (%)", "Time ", 
              array("TEST_TIME", "", "LLRA_LEADQUAL"), "", 10, 13,
  "");
      ?>
      
      <p>&nbsp;</p>
      
    </div>
        
        

		<? } if (checkModule('ldma_strengths') AND $row_rsStrengths['cs1'] <> "") { ?>
    <div class="TabbedPanelsContent">																<!-- STRENGTHS AND RECOMMENDATIONS -->
      <? debrief('report_indiv_debrief_tab_ldma_strengths'); ?>
      
      <h2>Current strengths, potential strengths, and recommendations</h2>
      <? echo $boilerplate['report_sr_intro_gen']; ?>
              
      <h3>Current strengths</h3>
      <p> <? 
      echo linknewtab($row_rsStrengths['cs1'])." ";
      echo linknewtab($row_rsStrengths['cs2'])." ";
      echo linknewtab($row_rsStrengths['cs3'])." ";
      ?>
          </p>
          <h3>Potential strengths</h3>
          <p>
            <? echo linknewtab($row_rsStrengths['ps1'])." ";
			      echo linknewtab($row_rsStrengths['ps2'])." "; ?>
          </p>
          <h3>Recommendations for growth</h3>
          <p><? echo linknewtab($row_rsStrengths['r1']); ?></p>
      		<p><? echo linknewtab($row_rsStrengths['r2']); ?></p>
              
      <p>&nbsp;</p>
      
    </div>
        
        
    
		<? } if (checkModule('strengths_written')) { ?>
    <div class="TabbedPanelsContent">																<!-- STRENGTHS AND RECOMM. (WRITTEN) -->
      <? debrief('report_indiv_debrief_tab_lmbefola_strengths'); ?>
         
      <h2>Current strengths, potential strengths, and recommendations</h2>
      <? 
      if ($instrument_id_base == "FOLA") { echo $boilerplate['report_sr_intro_fola']; }
      else if ($instrument_id_base == "LMBE") { echo $boilerplate['report_sr_intro_lmbe']; }
      else { echo $boilerplate['report_sr_intro_gen']; } ?>
      
      <h3>Current strengths</h3>
      <ul>
        <? if ($row_rsStrengths['cs1'] <> "") { ?>
          <li><? echo linknewtab($row_rsStrengths['cs1']); ?></li><? } ?>
        <? if ($row_rsStrengths['cs2'] <> "") { ?>
          <li><? echo linknewtab($row_rsStrengths['cs2']); ?></li><? } ?>
        <? if ($row_rsStrengths['cs3'] <> "") { ?>
          <li><? echo linknewtab($row_rsStrengths['cs3']); ?></li><? } ?>
      </ul>
      <h3>Potential strengths</h3>
      <ul>
        <? if ($row_rsStrengths['ps1'] <> "") { ?>
          <li><? echo linknewtab($row_rsStrengths['ps1']); ?></li><? } ?>
        <? if ($row_rsStrengths['ps2'] <> "") { ?>
          <li><? echo linknewtab($row_rsStrengths['ps2']); ?></li><? } ?>
      </ul>
      <h3>Recommendations for growth</h3>
      <ul>
        <? if ($row_rsStrengths['r1'] <> "") { ?>
          <li><? echo linknewtab($row_rsStrengths['r1']); ?></li><? } ?>
        <? if ($row_rsStrengths['r2'] <> "") { ?>
          <li><? echo linknewtab($row_rsStrengths['r2']); ?></li><? } ?>
      </ul>
        
      <p>&nbsp;</p>
      
    </div>
        
        

    
		<? } if (checkModule('suggestions_lsua') AND $lasnumber_1 > 0) { ?> 
    <div class="TabbedPanelsContent">											<!-- SUGGESTIONS FOR GROWTH (LSUA) -->
      <? debrief('report_indiv_debrief_tab_lsua_suggestions'); 
			
      $text = $boilerplate['report_lsua_suggestions']; 
      $text = str_replace("[LASNUMBER]", $lasnumber_1, $text);
			
			$resources = "";
			for ($i = 1; $i <= 7; $i ++) {
				if ($row_rsLsuaCom['lsua_resource'.$i] <> "") { 
					$resources .= "<li>".$row_rsLsuaCom['lsua_resource'.$i]."</li>";
				}
			}
      $text = str_replace("[RESOURCES]", $resources, $text);
      echo linknewtab($text); ?> 
        
      <p>&nbsp;</p>
    </div>
        
        

        
    
		<? } if (checkModule('lsua_strengths') AND $tabtext_lsua_strengths <> "") { ?>
    <div class="TabbedPanelsContent">													<!-- STRENGTHS AND RECOMM. (LSUA) -->
      <? debrief('report_indiv_debrief_tab_lsua_strengths'); ?>
      
      <? echo linknewtab($tabtext_lsua_strengths); ?>
    </div>
        
        
        
		<? } if (checkModule('llra_themes')) { ?>
      <div class="TabbedPanelsContent">										<!-- LLRA LEADERSHIP THEMES: OVERVIEW -->
      	<? debrief('report_indiv_debrief_tab_llra_themes_intro'); ?>
        
				<? echo $boilerplate['report_llra_leadstyles_intro']; ?>
        <p>&nbsp;</p>
      </div>
      
      
      
      <? 
      // For each LLRA theme that has text prepared, create a tab for that theme.
      for ($cur_theme = 1; $cur_theme <= 7; $cur_theme ++) {
        if ($llra_theme_tabtext[$cur_theme] <> "") { 
          ?>
          <div class="TabbedPanelsContent">											<!-- LLRA (PANEL FOR THIS THEME) -->
      			<? debrief('report_indiv_debrief_tab_ldma_'.$llra_theme_labels[$cur_theme]); ?>
            
            <? echo $boilerplate['report_llra_theme_'.$llra_theme_labels[$cur_theme]]; ?>
            <? echo linknewtab($llra_theme_tabtext[$cur_theme]); ?>
            
            <p>&nbsp;</p>
                  
          </div> <?
        }
      } ?>
        
    <div class="TabbedPanelsContent">														<!-- SUMMARY CHARTS FOR LLRA THEMES -->
      <? debrief('report_indiv_debrief_tab_llra_themes_summary'); ?>
        
      <? echo $boilerplate['report_llra_charts_intro']; ?>
      
      <? 
      highchart($rsChartResultsByTestTime, "Leadership themes score by test time", "", 
              "Test time", "Leadership themes score (%)", "Time ", 
              array("TEST_TIME", "", "LLRA_LEADTHEMES"), "", 10, 13,
  			"");
      ?>
      
      <p>&nbsp;</p>
      
    </div>
        
    
        
		<? } if (checkModule('lrja_themes')) { ?>
    <? // For each LRJA theme that has text prepared, create a tab for that theme.
    for ($cur_theme = 1; $cur_theme <= 5; $cur_theme ++) {
      if ($lrja_theme_tabtext[$cur_theme] <> "") { 
        ?>
        <div class="TabbedPanelsContent">											<!-- LRJA (PANEL FOR THIS THEME) -->
          <? $theme = str_replace(array(" ", "&"), "", $lrja_theme_labels[$cur_theme]);
						debrief('report_indiv_debrief_tab_lrja_theme_'.$theme);
						
            echo $boilerplate['report_lrja_theme_'.$theme]; ?>
          <? echo linknewtab($lrja_theme_tabtext[$cur_theme]); ?>
          
          <p>&nbsp;</p>
                
        </div> <?
      }
    } ?>
        
    <div class="TabbedPanelsContent">													<!-- CHARTS FOR RJ THEMES (LRJA) -->
      <? debrief('report_indiv_debrief_tab_lrja_themes_summary'); ?>
          
			<? echo $boilerplate['report_lrja_charts_intro']; ?>
      
      <? 
      highchart($rsChartResultsByTestTime, "Reflective judgment score by test time", "", 
              "Test time", "Reflective judgment score (%)", "Time ", 
              array("TEST_TIME", "", "LRJA_THEMES"), "", 10, 13,
  			"");
      ?>
        
      <p>&nbsp;</p>
      
    </div>
        
    
    
    
        
		<? } if (checkModule('ldpa_themes')) { ?>
        
    <!-- LDPA THEMES: OVERVIEW TAB doesn't exist anymore. 
    It was replaced with the general "About this report" tab. -->
    <?
    // For each LDPA theme that has text prepared, create a tab for that theme.
    for ($cur_theme = 1; $cur_theme <= 9; $cur_theme ++) {
      if ($ldpa_theme_tabtext[$cur_theme] <> "") { 
        ?>
        <div class="TabbedPanelsContent">											<!-- LDPA (PANEL FOR THIS THEME) -->
          <? $theme = str_replace(array(" ", "&"), "", $ldpa_theme_labels[$cur_theme]);
					
            echo $boilerplate['report_ldpa_theme_'.$theme]; ?>
          <? echo linknewtab($ldpa_theme_tabtext[$cur_theme]); ?>
          <p>&nbsp;</p>
        </div> <?
      }
    } ?>
        
    <div class="TabbedPanelsContent">													<!-- CHARTS FOR DP THEMES (LDPA) -->
      
			<? echo $boilerplate['report_ldpa_charts_intro']; ?>
      <? highchart($rsChartResultsByTestTime, "Developmental pedagogy score by test time", "", 
              "Test time", "Developmental pedagogy score (%)", "Time ", 
              array("TEST_TIME", "", "LDPA_THEMES"), "", 10, 13,
  			""); ?>
      <p>&nbsp;</p>
    </div>
        
        
        
        
        
        
        
		<? } if (checkModule('lima_themes')) { ?>
        
    <!-- LIMA THEMES: OVERVIEW TAB doesn't exist anymore. 
    It was replaced with the general "About this report" tab. -->
    <?
    // For each LIMA theme that has text prepared, create a tab for that theme.
    for ($cur_theme = 1; $cur_theme <= 8; $cur_theme ++) {
      if ($lima_theme_tabtext[$cur_theme] <> "") { 
        ?>
        <div class="TabbedPanelsContent">							<!-- LIMA (PANEL FOR THIS THEME) -->
          <? $theme = str_replace(array(" ", "&"), "", $lima_theme_labels[$cur_theme]);
						debrief('report_indiv_debrief_tab_lima_theme_'.$theme);
						
            echo $boilerplate['report_lima_theme_'.$theme]; ?>
          <? echo linknewtab($lima_theme_tabtext[$cur_theme]); ?>
          <p>&nbsp;</p>
        </div> <?
      }
    } ?>
        
    <div class="TabbedPanelsContent">							<!-- CHARTS FOR INTEGRAL MODEL THEMES (LIMA) -->
      <? debrief('report_indiv_debrief_tab_lima_themes_summary'); ?>
      
			<? echo $boilerplate['report_lima_charts_intro']; ?>
      <? highchart($rsChartResultsByTestTime, "Integral model score by test time", "", 
              "Test time", "Integral model score (%)", "Time ", 
              array("TEST_TIME", "", "LIMA_THEMES"), "", 10, 13,
  			""); ?>
      <p>&nbsp;</p>
    </div>
        
        
        
        
        
    
        
		<? } if (checkModule('lera_themes')) { ?>
      
    <!-- LERA THEMES: OVERVIEW TAB doesn't exist anymore. 
    It was replaced with the general "About this report" tab. -->
    
    <?
    // For each LERA theme that has text prepared, create a tab for that theme.
    for ($cur_theme = 1; $cur_theme <= 8; $cur_theme ++) {
      if ($lera_theme_tabtext[$cur_theme] <> "") { 
        ?>
        <div class="TabbedPanelsContent">							<!-- LERA (PANEL FOR THIS THEME) -->
          <? $theme = str_replace(array(" ", "&"), "", $lera_theme_labels[$cur_theme]);
						debrief('report_indiv_debrief_tab_lera_theme_'.$theme);
						
            echo $boilerplate['report_lera_theme_'.$theme]; ?>
          <? echo linknewtab($lera_theme_tabtext[$cur_theme]); ?>
          
          <p>&nbsp;</p>
          
        </div> <?
      }
    } ?>
        
    <div class="TabbedPanelsContent">							<!-- CHARTS FOR ETHICS THEMES (LERA) -->
      <? debrief('report_indiv_debrief_tab_lera_themes_summary'); ?>
      
      <? echo $boilerplate['report_lera_charts_intro']; ?>
      
      <? 
      highchart($rsChartResultsByTestTime, "Ethical reasoning score by test time", "", 
              "Test time", "Ethical reasoning score (%)", "Time ", 
              array("TEST_TIME", "", "LERA_THEMES"), "", 10, 13,
        "");
      ?>
      
      <p>&nbsp;</p>
    
    </div>
        
    
		<? } if (checkModule('lera_moralemotions')) { ?>
    <div class="TabbedPanelsContent">							<!-- MORAL EMOTIONS SURVEY RESULTS (LERA) -->
          
      <? echo linknewtab($lera_eesurvey_tabtext); // includes intro boilerplate ?>
            
      <p>&nbsp;</p>
    
    </div>
        
        
      
		<? } if (checkModule('sma_themes')) { ?>
    <div class="TabbedPanelsContent">							<!-- SMA: RUBRICS FEEDBACK -->
      <? debrief('report_indiv_debrief_tab_sma_reasoning'); ?>
              
      <? 
      $text = $boilerplate['report_sma_themes_intro']; 
      $text = str_replace("[quality 1]", $row_rsEssays['menu01'], $text);
      $text = str_replace("[quality 2]", $row_rsEssays['menu02'], $text);
      $text = str_replace("[quality 3]", $row_rsEssays['menu03'], $text);
      $text = str_replace("[quality 4]", $row_rsEssays['menu04'], $text);
      $text = str_replace("[quality 5]", $row_rsEssays['menu05'], $text);
      echo $text;
      ?>
      
      <?
      
      $cur_theme = ""; // the "This is a new theme!" logic should kick in on first execution of the loop.
      $means_coded = FALSE;	// tracks whether the "means" code for this quality, is present.
      $show_whatsnext = FALSE;
			$whatsnext_text_now = ""; // queued description of performance in this theme at the current phase
			$whatsnext_text_next = ""; // queued desc of performance in this theme at the next phase(s)
      
      // go through each SMA code that might be marked.
      // There are 0-2 codes in each theme that might be present in any amount.
      for ($c = '001'; $c <= 100; $c = str_pad($c+1, 3, '0', STR_PAD_LEFT)) {
        
        // the loop traverses the marked codes in the order of the code slots.
        // I'm counting on the fact that the "means" slots will always be before "why" slots.
        
      	// If this code was selected
        if ($codes['code'.$c] > 0) {
          // Fetch the text for this code marked in la_rubrics
					$sql = sprintf("SELECT r.theme_name, r.rubric_stem AS stem_this, r.rubric_item AS item_this,
							rnext.rubric_stem AS stem_next, rnext.rubric_item AS item_next
						FROM la_rubrics r
							LEFT JOIN la_rubrics rnext ON r.instrument_id = rnext.instrument_id AND r.type = rnext.type
								AND r.code_number = rnext.code_number AND r.las_number_low + 0.25 = rnext.las_number_low
						WHERE r.rubrickey = %s ",
							SQLstr($codes['code'.$c], 'int'));
					$rsRubric = mysql_query($sql) or die(mysql_error());
          $row_rsRubric = mysql_fetch_assoc($rsRubric);

					// end the last paragraph, if one was present
					if ($row_rsRubric['theme_name'] <> $cur_theme) {
            if ($cur_theme <> "") { 
							if ($show_whatsnext) { echo " <a class='whats_next_link'>» what's next </a>"; }
							echo "</p>";
							if ($show_whatsnext) { 
								// Prepare the learning activity boilerplate
								$activity = $boilerplate['report_indiv_whatsnext_activity'];
								$activity = str_replace("who receive a score of [SCORE]", "at your phase", $activity);
								$activity = str_replace("[THEME]", $cur_theme, $activity);
								
								// Prepare the hidden content div
								$whatsnext_div = sprintf("<div class='whats_next_content'>
										<h3>%s: what's next</h3>
										<p class='current'>Currently, you appear to think that %s%s</p>
										<p>At the next phase, learners think that %s%s</p>
										%s
										<p>&nbsp;</p>
									</div>",
										ucfirst($cur_theme),
										strtolower(substr($whatsnext_text_now, 0, 1)),
										substr($whatsnext_text_now, 1),
										strtolower(substr($whatsnext_text_next, 0, 1)),
										substr($whatsnext_text_next, 1),
										$activity
										);

								echo $whatsnext_div; 
								$whatsnext_div = "";
								$show_whatsnext = FALSE;
								$whatsnext_text_now = ""; 
								$whatsnext_text_next = "";
							} // ENDIF: if the whatsnext div should be shown
						} 

            $cur_theme = $row_rsRubric['theme_name'];
            ?><h3><? echo ucfirst($cur_theme); ?></h3>
            <p><?
            $means_coded = FALSE;
          }
					
          // Gather the STEM and BODY for each 
          $stem_this = $row_rsRubric['stem_this']; $body_this = $row_rsRubric['item_this'];
          $stem_next = $row_rsRubric['stem_next']; $body_next = $row_rsRubric['item_next'];

          if (!strpos($stem_this, "important")) { $means_coded = TRUE; }
          // If the "XXX means..." text isn't present for this quality, the stem must be changed.
          if (!$means_coded) {
            $stem_this = str_replace("It", "<em>".ucfirst($cur_theme)."</em>", $stem_this);
          }

					$feedback_this = $stem_this." ".$body_this." ";
					$feedback_next = $stem_next." ".$body_next." ";
          // strip special characters from this text (mainly, anything between {tags})
          $feedback_this = preg_replace("/{[^{}]+}/", "", $feedback_this);
          $feedback_this = str_replace(array("*"), "", $feedback_this);
          $feedback_next = preg_replace("/{[^{}]+}/", "", $feedback_next);
          $feedback_next = str_replace(array("*"), "", $feedback_next);

          // display feedback based on the current rubric
          echo linknewtab($feedback_this); 

          // Prepare the queue for text in the What's Next div, if this rubric has a Next.
          // Because Theo tends to prepopulate DB cells with short placeholders, 
          // I have to use strlen to test whether the "next" text is empty or not.
          if (strlen($body_next) > 8) {
          	$show_whatsnext = TRUE;
          	$whatsnext_text_now .= $feedback_this;
          	$whatsnext_text_next .= $feedback_next; 
          }
        }
      } // LOOP for each code slot $c
			
			// Once the loop ends, there will be 1 more "What's next" link to print out, followed by the div.
			if ($show_whatsnext) { echo " <a class='whats_next_link'>» what's next </a>"; }
			echo "</p>";
			if ($show_whatsnext) { 
				// Prepare the learning activity boilerplate
				$activity = $boilerplate['report_indiv_whatsnext_activity'];
				$activity = str_replace("who receive a score of [SCORE]", "at your phase", $activity);
				$activity = str_replace("[THEME]", $cur_theme, $activity);
				
				// Prepare the hidden content div
				$whatsnext_div = sprintf("<div class='whats_next_content'>
						<h3>%s: what's next</h3>
						<p class='current'>Currently, you appear to think that %s%s</p>
						<p>At the next phase, learners think that %s%s</p>
						%s
						<p>&nbsp;</p>
					</div>",
						ucfirst($cur_theme),
						strtolower(substr($whatsnext_text_now, 0, 1)),
						substr($whatsnext_text_now, 1),
						strtolower(substr($whatsnext_text_next, 0, 1)),
						substr($whatsnext_text_next, 1),
						$activity
						);

				echo $whatsnext_div; 
				$whatsnext_div = "";
				$show_whatsnext = FALSE;
				$whatsnext_text_now = ""; 
				$whatsnext_text_next = "";
			} // ENDIF: if the whatsnext div should be shown
      ?>
      
      <p>&nbsp;</p>
    
    </div>
				
    <div class="TabbedPanelsContent">							<!-- SMA: YOUR SCORE -->
      <? debrief('report_indiv_debrief_tab_sma_score'); ?>
      
      <? echo $boilerplate['report_sma_score_intro']; 
			
			// calculate highest score
			$sql_smaHighest = sprintf("SELECT MAX(c.code491) AS sma_highest
				FROM la_data d
					LEFT JOIN {$code_table} c ON d.lakey = c.lakey
					LEFT JOIN la_scores s ON d.lakey = s.lakey
					LEFT JOIN la_survey_data sd ON d.lakey = sd.lakey
				WHERE (d.finalized %s OR d.lakey=%s) {$filter_instrument_id} AND d.userkey=%s 
				GROUP BY d.lakey ORDER BY d.date_completed",
					// if you're the test taker, include only other released records. Otherwise include finalized.
					($row_rsRegistrants['userkey'] == $_SESSION['log_userkey'] ? " = 1" : " >= 1"),
					SQLstr($lakey, 'int'),
					SQLstr($row_rsRegistrants['userkey'], 'int'));
			$rsSmaHighest = mysql_query($sql_smaHighest) or error_log("ERROR fetching highest SMA score");
			$row_rsSmaHighest = mysql_fetch_assoc($rsSmaHighest);
			$sma_highest = $row_rsSmaHighest['sma_highest'];
			
			highchart($rsChartResultsByTestTime, "Mindfulness score by test time", "", 
				"Test time", "Mindfulness score", "Time ", 
				array("TEST_TIME", "", "SMA_THEMES"), "", 10, round($sma_highest+1, 1), "");
      ?>
      
      <? echo $boilerplate['caveat_limits_of_assessment']; ?>
      
      <p>&nbsp;</p>
      
    </div>
        
    
        
    <? } if (checkModule('sms_score')) { ?>
    <div class="TabbedPanelsContent">							<!-- SMS: YOUR SCORE -->
      <? debrief('report_indiv_debrief_tab_sms_yourscores'); ?>
       
      <? echo $boilerplate['report_sms_scores_intro']; ?>
      
      <? 
        highchart($rsChartResultsByTestTime, "Mindfulness score by test time", "", 
              "Test time", "Mindfulness score", "Time ", 
              array("TEST_TIME", "", "SMS_SCORE"), "", 1, 6, "");
      ?>
      
      <p>&nbsp;</p>
      
    </div>
        
        
    <div class="TabbedPanelsContent">							<!-- SMS: WHAT SCORES MEAN -->
      <? debrief('report_indiv_debrief_tab_sms_scoresmeaning'); ?>
       
      <? echo $boilerplate['report_sms_scores_meaning']; ?>
      
      <p>&nbsp;</p>
      
    </div>
        
        
        
    <? } if (checkModule('smj_scores')) { ?>
    <div class="TabbedPanelsContent">							<!-- SMJ: YOUR SCORES -->
      <? debrief('report_indiv_debrief_tab_smj_yourscores'); ?>
      
      <? 
			$sql_rsChartSmjByTestTime = sprintf("SELECT d.test_time AS TEST_TIME, 
          m001.item_value + ROUND(RAND()*0.1, 2) AS T_BODY_SENSATIONS,
          m002.item_value + ROUND(RAND()*0.1, 2) AS T_EMOTIONS,
          m003.item_value + ROUND(RAND()*0.1, 2) AS T_BELIEFS,
          m004.item_value + ROUND(RAND()*0.1, 2) AS T_THOUGHTS,
          m005.item_value + ROUND(RAND()*0.1, 2) AS T_VALUES,
          m006.item_value + ROUND(RAND()*0.1, 2) AS T_RELATIONSHIPS,
          m101.item_value + ROUND(RAND()*0.1, 2) AS S_BODY_SENSATIONS,
          m102.item_value + ROUND(RAND()*0.1, 2) AS S_EMOTIONS,
          m103.item_value + ROUND(RAND()*0.1, 2) AS S_BELIEFS,
          m104.item_value + ROUND(RAND()*0.1, 2) AS S_THOUGHTS,
          m105.item_value + ROUND(RAND()*0.1, 2) AS S_VALUES,
          m106.item_value + ROUND(RAND()*0.1, 2) AS S_RELATIONSHIPS,
          (m022.item_value + m023.item_value) / 2 + ROUND(RAND()*0.1, 2) AS T_CONTROL,
          (m021.item_value + m024.item_value + m025.item_value) / 3 + ROUND(RAND()*0.1, 2) AS T_CONNECTION,
          (m028.item_value + m029.item_value + m030.item_value) / 3 + ROUND(RAND()*0.1, 2) AS T_COMPASSION
        FROM la_data d
          LEFT JOIN {$code_table} c ON d.lakey = c.lakey
          LEFT JOIN la_menus m001 ON c.code001 = m001.menukey
          LEFT JOIN la_menus m002 ON c.code002 = m002.menukey
          LEFT JOIN la_menus m003 ON c.code003 = m003.menukey
          LEFT JOIN la_menus m004 ON c.code004 = m004.menukey
          LEFT JOIN la_menus m005 ON c.code005 = m005.menukey
          LEFT JOIN la_menus m006 ON c.code006 = m006.menukey
          LEFT JOIN la_menus m101 ON c.code101 = m101.menukey
          LEFT JOIN la_menus m102 ON c.code102 = m102.menukey
          LEFT JOIN la_menus m103 ON c.code103 = m103.menukey
          LEFT JOIN la_menus m104 ON c.code104 = m104.menukey
          LEFT JOIN la_menus m105 ON c.code105 = m105.menukey
          LEFT JOIN la_menus m106 ON c.code106 = m106.menukey
          LEFT JOIN la_menus m021 ON c.code021 = m021.menukey
          LEFT JOIN la_menus m022 ON c.code022 = m022.menukey
          LEFT JOIN la_menus m023 ON c.code023 = m023.menukey
          LEFT JOIN la_menus m024 ON c.code024 = m024.menukey
          LEFT JOIN la_menus m025 ON c.code025 = m025.menukey
          LEFT JOIN la_menus m026 ON c.code026 = m026.menukey
          LEFT JOIN la_menus m027 ON c.code027 = m027.menukey
          LEFT JOIN la_menus m028 ON c.code028 = m028.menukey
          LEFT JOIN la_menus m029 ON c.code029 = m029.menukey
          LEFT JOIN la_menus m030 ON c.code030 = m030.menukey
        WHERE (d.finalized %s OR d.lakey=%s) {$filter_instrument_id} AND d.userkey=%s 
        GROUP BY d.test_time", 
          // if you're the test taker, include only other released records. Otherwise include finalized.
          ($row_rsRegistrants['userkey'] == $_SESSION['log_userkey'] ? " = 1" : " >= 1"),
          SQLstr($lakey, 'int'),
          SQLstr($row_rsRegistrants['userkey'], 'int'));
      // topher($sql_rsChartSmjByTestTime); topher();
      $rsChartSmjByTestTime = mysql_query($sql_rsChartSmjByTestTime) or die(mysql_error());
      
      
      
      echo $boilerplate['report_smj_scores']; 
      
      echo $boilerplate['report_smj_scores_chart1']; 
      
      highchart($rsChartSmjByTestTime, 
        "Your mindfulness scores for yourself", "", 
        "Test time", "Score", "Time ",  
        array("TEST_TIME", "", "S_BODY_SENSATIONS", "S_EMOTIONS", 
          "S_BELIEFS", "S_THOUGHTS", "S_VALUES", "S_RELATIONSHIPS"), 
        array("Body sensations", "Emotions", "Beliefs", "Thoughts", "Values", "Relationships"),  
          0, 4.1, "", "line"); 
      
      if ($codes['coded_1'] > 0 OR 1) {
        
        echo $boilerplate['report_smj_scores_chart2'];
        
        /*
        highchart($rsChartResultsByTestTime, "Reflection: Instructor score", "", 
            "Test time", "Score", "Time ", 
            array("TEST_TIME", "", "SMJ_SCORE_TEACHER_ALL"), 
            "",
            0, 4.1, ""); */
         
        highchart($rsChartSmjByTestTime, 
          "Reflection: Instructor score", "", 
          "Test time", "Score", "Time ", 
          array("TEST_TIME", "", 
            "T_BODY_SENSATIONS", "T_EMOTIONS", "T_BELIEFS", "T_THOUGHTS", "T_VALUES", "T_RELATIONSHIPS"),
          array("Body sensations", "Emotions", "Beliefs", "Thoughts", "Values", "Relationships"), 
          0, 4.1, "", "line"); 
        
        echo $boilerplate['report_smj_scores_chart3'];
        
        highchart($rsChartSmjByTestTime, 
          "Control, connection, and compassion: Instructor score", "", 
          "Test time", "Score", "Time ", 
          array("TEST_TIME", "", "T_CONTROL", "T_CONNECTION", "T_COMPASSION"),
          array("Control", "Connection", "Compassion"), 
          0, 4.1, "", "line"); 
        
      } ?>
      
      <p>&nbsp;</p>
      
    </div>
        
        
        
		<? // this tab should only show if teacher has coded.
      if ($codes['coded_1'] > 0) { ?>
    <div class="TabbedPanelsContent">							<!-- SMJ: TEACHER COMMENTS -->
      <? debrief('report_indiv_debrief_tab_smj_teachercomments'); ?>
              
            
			<? 
      $sql_teacherComments = sprintf(" SELECT * FROM la_rubrics 
        WHERE rubrickey = %s OR rubrickey = %s OR rubrickey = %s OR rubrickey = %s 
           OR rubrickey = %s OR rubrickey = %s OR rubrickey = %s OR rubrickey = %s 
           OR rubrickey = %s OR rubrickey = %s 
        ORDER BY code_number ", 
          SQLstr($codes['code201'], 'int'),
          SQLstr($codes['code202'], 'int'),
          SQLstr($codes['code203'], 'int'),
          SQLstr($codes['code204'], 'int'),
          SQLstr($codes['code205'], 'int'),
          SQLstr($codes['code206'], 'int'),
          SQLstr($codes['code207'], 'int'),
          SQLstr($codes['code208'], 'int'),
          SQLstr($codes['code209'], 'int'),
          SQLstr($codes['code210'], 'int'));
      $rsTeacherComments = mysql_query($sql_teacherComments) or die(mysql_error());
      
      $sql_teacherSugg = sprintf(" SELECT * FROM la_rubrics 
        WHERE rubrickey = %s OR rubrickey = %s OR rubrickey = %s OR rubrickey = %s 
           OR rubrickey = %s OR rubrickey = %s OR rubrickey = %s OR rubrickey = %s 
           OR rubrickey = %s OR rubrickey = %s 
        ORDER BY code_number ", 
          SQLstr($codes['code221'], 'int'),
          SQLstr($codes['code222'], 'int'),
          SQLstr($codes['code223'], 'int'),
          SQLstr($codes['code224'], 'int'),
          SQLstr($codes['code225'], 'int'),
          SQLstr($codes['code226'], 'int'),
          SQLstr($codes['code227'], 'int'),
          SQLstr($codes['code228'], 'int'),
          SQLstr($codes['code229'], 'int'),
          SQLstr($codes['code230'], 'int'));
      $rsTeacherSugg = mysql_query($sql_teacherSugg) or die(mysql_error());
      
      $comments_array = array();
      while ($row_rsTeacherComments = mysql_fetch_assoc($rsTeacherComments)) {
        if (count($comments_array) == 0) { 
          $comments_array[] = $row_rsTeacherComments['rubric_stem']; 
        }
        $comments_array[] = $row_rsTeacherComments['rubric_item'].",";
      }
      $i = count($comments_array);
			// > 2 because the sentence-starter stem counts as an item in the commenst array.
      if ($i > 2) { $comments_array[$i-2] .= " and "; }
      $comments = implode(" ", $comments_array);
      $comments = substr($comments, 0, strlen($comments) - 1);
      if ($i > 0) { $comments .= "."; }
      
      $suggestions = "";
      while ($row_rsTeacherSugg = mysql_fetch_assoc($rsTeacherSugg)) {
        if ($suggestions == "") { $suggestions .= $row_rsTeacherSugg['rubric_stem']." "; }
        else { $suggestions .= "Also, "; }
        $suggestions .= $row_rsTeacherSugg['rubric_item']." ";
      }
      
      $text = $boilerplate['report_smj_teachercomments'];
      $text = str_replace("[TEACHER_COMMENTS]", $comments, $text);
      $text = str_replace("[TEACHER_SUGGESTIONS]", $suggestions, $text);
      // don't print out anything if there were no comments made.
      // if ($comments == "" AND $suggestions == "") { $text = ""; }
      
      echo linknewtab($text); // contains boilerplate + comments + suggestions ?>
      
      <? if ($instrument_id == "SMJ" AND $codes['codercomment'] <> "") { ?>
        <p><? echo linknewtab($codes['codercomment']); ?></p>
      <? } ?>
                
      <p>&nbsp;</p>
    
    </div>
    <? } ?>
        
        
        
		<? } if (checkModule('suggestions_ldma') AND $lasnumber_1 > 0) { ?> 
    <div class="TabbedPanelsContent">																				<!-- SUGGESTIONS FOR GROWTH (LDMA) -->
      <? debrief('report_indiv_debrief_tab_ldma_suggestions'); ?>
        
			<?
      $text = $boilerplate['report_ldma_suggestions']; 
      $text = str_replace("[LASNUMBER]", $lasnumber_1, $text);
      $text = str_replace("[AREAS_FOR_GROWTH]", 
                            $row_rsLaLdmaComments["ldma_growth_perspectives"].
                            $row_rsLaLdmaComments["ldma_growth_response"].
                            $row_rsLaLdmaComments["ldma_growth_process"].
                            $row_rsLaLdmaComments["ldma_growth_org"], $text);
      $comments_lessons = "";
      for ($i = 1; isset($row_rsLaLdmaComments["ldma_lesson".$i]); $i ++) { 
        if ($row_rsLaLdmaComments["ldma_lesson".$i] <> "") { 
          $comments_lessons .= "<li>".$row_rsLaLdmaComments["ldma_lesson".$i]."</li>";
        }
      }
      $text = str_replace("[LDMA_LESSONS]", $comments_lessons, $text);
      echo linknewtab($text);
      ?>   
      <p>&nbsp;</p>
    </div>
        
    
    

		<? } if (checkModule('perspectives')) { ?>
    <div class="TabbedPanelsContent">							<!-- PERSPECTIVES (GENERAL TAB) -->
      <? debrief('report_indiv_debrief_tab_ldma_perspectives'); ?>
      
      <? echo $boilerplate['report_ldma_perspectives_intro']; ?>
          
    </div>
        
    <div class="TabbedPanelsContent">							<!-- PERSPECTIVES TAKEN -->
      <? debrief('report_indiv_debrief_tab_ldma_ptaken'); ?>
          
			<?
			
			$taken_score = round($codes['code451']);
			
			// Count up how many perspectives the person took in the performance.
      // Also write the HTML code to list out those perspectives in a colorful bar graph.
      // Also tally up a score of their perspective-taking quality 
			$numPTaken_explicit = 0;
			$numPTaken_implicit = 0;
			$perspectives_taken_but_not_sought = array();
      $graphPerspectivesTaken = "";
      $colorNum = 0;	// color selector
			// For each number slot between 001 and 151 (skipping 51-100)
			for ($i = zeropad(1, 3); $i < 151; $i = zeropad($i+1, 3)) {
        // skip 51-100, which are perspective-seeking codes. Take again at 101.
        if ($i == 51) { $i = 101; }
				
				// IF this code is marked in la_codes... (marked at any level of p-taking quality)
        if ($codes['code'.$i] >= 1) {
					// this inner WHILE loop searches for the right perspective row.
					// $j is a buffer to prevent it from searching forever. 
					$j = 0;	
					while ($perspective['code_ptaken'] <> $i AND $j < 200) {
						$perspective = mysql_fetch_assoc($rsPerspectives);
						$j ++;
					}
					// skip over this code if the search for an appropriate row didn't find any results.
					if ($j < 200) {
						// if the code is an explicit one, add to the explicits counter.
						if ($perspective['impl_expl'] == 1) { $numPTaken_explicit ++; }
						// if the code is an implicit one, add to the implicits counter.
						if ($perspective['impl_expl'] == 2) { $numPTaken_implicit ++; }
						
						$graphPerspectivesTaken .= htmlBarGraphRow($perspective['perspective'], 
							" ", $codes['code'.$i], (100 * $codes['code'.$i] / 4), 
							$htmlBarGraphColors[$colorNum]);
						$colorNum ++;
						// Go back to the 1st color if we've reached the last color
						if (!isset($htmlBarGraphColors[$colorNum])) { $colorNum = 0; }

						// Remember that this perspective was taken.
						// indexed by the P-seeking code slot #
						$perspectives_taken_but_not_sought[intval($perspective['code_psought'])] = $perspective['perspective'];
					}
					
					// Reset the perspectives recordset
					mysql_data_seek($rsPerspectives, 0);
        } // END IF: if this code had something marked in la_codes.
      } // END WHILE loop which goes through all codes.
			
			// Perspective NOT taken
      $text_did_not_take = "";
    	// if a selection was made, show a recommendation to reflect on the relevance of that perspective. Otherwise, display a general "pick a perspective you took and reflect more deeply on it" recommendation.
      if ($codes['code461'] > 0) {
      	// find the right perspective row
      	mysql_data_seek($rsPerspectives, 0);
				for ($j = 0; $perspective['code_ptaken'] <> $codes['code461'] AND $j < 200; $j ++) {
					$perspective = mysql_fetch_assoc($rsPerspectives);
				}

				$text_did_not_take = $boilerplate['report_ldma_ptaking_didnottake'];
				$text_did_not_take = str_replace("[P_NOT_TAKEN]", $perspective['perspective'], $text_did_not_take);
      }

			$graph_taken = "</p>";
			if (($numPTaken_explicit + $numPTaken_implicit) > 0) {
				$graph_taken = "We rated the skill you demonstrated in taking 
						each of these perspectives on a scale of 1 to 4 (from low to high), 
						as shown in the following figure.</p>".$graphPerspectivesTaken;
			} 
			
			$meets_needs = "";
			if ($row_rsPerspManLevel['pt_man_level_number'] > 0) {
				$meets_needs = "This level of perspective taking meets the needs of most <em>".
					$row_rsPerspManLevel['pt_man_level_name'].
					($row_rsPerspManLevel['pt_man_level_number'] < 3 ? "s" : " managers").
					"</em> (level ".$row_rsPerspManLevel['pt_man_level_number']."). ";
			}
			
			$reasons_taken = "";
			if ($codes['code201'] > 0) {
				$reasons_taken .= "<li>".lookup($rsLaCodeMenus, "pulldownkey", 
										$codes['code201'], "perspective_taking_deliberation")."</li>"; 
			}
			if ($codes['code202'] > 0) {
				$reasons_taken .= "<li>".lookup($rsLaCodeMenus, "pulldownkey", 
										$codes['code202'], "perspective_taking_self_others")."</li>";
			}
			if ($codes['code203'] > 0) {
				$reasons_taken .= "<li>".lookup($rsLaCodeMenus, "pulldownkey", 
										$codes['code203'], "perspective_taking_situation")."</li>";
			}
			// If there's any 'reasons taken' codes to display, display them.
			if ($reasons_taken <> "") { 
				$reasons_taken = "<p>Leaders take perspectives for a number of reasons. 
					In your performance, you appeared primarily to take perspectives in order to:</p>
					<ul>".$reasons_taken."</ul>"; 
			}
			
			// swap in the dynamic text tags
			$text_pt = $boilerplate['report_ldma_ptaking'];
			$text_pt = str_replace("[TAKEN_EXPLICIT]", $numPTaken_explicit, $text_pt);
			$text_pt = str_replace("[TAKEN_IMPLICIT]", $numPTaken_implicit, $text_pt);
			$text_pt = str_replace("[DID_NOT_TAKE]", $text_did_not_take, $text_pt);
			$text_pt = str_replace("[TOTAL_EXPLICIT]", $row_rsPerspectiveCounts['explicit'], $text_pt);
			$text_pt = str_replace("[TOTAL_IMPLICIT]", $row_rsPerspectiveCounts['implicit'], $text_pt);
			$text_pt = str_replace("[GRAPH_TAKEN]", $graph_taken, $text_pt);
			$text_pt = str_replace("[SCORE_TAKEN]", $taken_score, $text_pt);
			$text_pt = str_replace("[MEETS_NEEDS]", $meets_needs, $text_pt);
			$text_pt = str_replace("[REASONS_TAKEN]", $reasons_taken, $text_pt);
			// split the text into before / after the pulldown menu & charts etc. in the middle. 
			$text_pt = explode("[PHP]", $text_pt);
			
			echo linknewtab($text_pt[0]); ?>
        
    	<? 
	    	$ceiling = 80; if ($taken_score > $ceiling) { $ceiling = $taken_score; }
				/* highchart($rsChartResultsByTestTime, "Perspective-taking score by test time", "", 
						"Test time", "Quality of perspective taking", "Time ", 
						array("TEST_TIME", "", "P_TAKEN_QUALITY"), "", "", $ceiling, ""); */

				highchart($rsChartResultsByTestTime, 
	        "Perspective taking by test time", "", 
	        "Test time", "Quality of perspective taking", "Time ", 
	        array("TEST_TIME", "", "P_TAKEN_QUALITY", "COMPARISON_PTAKEN"), 
	        array("Your score", "Average for your management level"), "", $ceiling, "");

				echo linknewtab($text_pt[1]); 

			?>
			
			<p>&nbsp;</p>
    
    </div>
			
		<div class="TabbedPanelsContent">							<!-- PERSPECTIVES SOUGHT -->
      <? debrief('report_indiv_debrief_tab_ldma_psought'); ?>
			
			<? 
			$sought_score = round($codes['code452']);
			
			// Prepare COUNTS OF PERSPECTIVES
			$numPSought_explicit = 0;
			$numPSought_implicit = 0;
			$graphPerspectivesSought = "";	// bars will be added to this graph in the following loop.
			$colorNum = 0;	// color selector
			for ($i = '051'; $i <= 200; $i = zeropad($i + 1, 3)) { 
				// skip 101-150, which are perspective-taking codes. Seek again at 151.
				if ($i == 101) { $i = 151; }
				// IF this code is marked in la_codes... (marked at any level of p-taking quality)
				if ($codes['code'.$i] >= 1) {
					// topher("Found code{$i}. ");
					// this inner WHILE loop searches for the right perspective row, to get informatino from.
					// $j is a buffer to prevent it from searching forever. 
					// if it doesn't find a matching row, then that code will be treated as a false positive.
					$j = 0;	

					mysql_data_seek($rsPerspectives, 0);
					while ($perspective['code_psought'] <> $i AND $j < 200) {
						$perspective = mysql_fetch_assoc($rsPerspectives);
						$j ++;
					}
					mysql_data_seek($rsPerspectives, 0);

					// skip over this code if the search for an appropriate row didn't find any results.
					if ($j < 200) {
						// if the code is an explicit one, add to the explicits counter.
						if ($perspective['impl_expl'] == 1) { $numPSought_explicit ++; }
						// if the code is an implicit one, add to the implicits counter.
						if ($perspective['impl_expl'] == 2) { $numPSought_implicit ++; }
						$graphPerspectivesSought .= htmlBarGraphRow($perspective['perspective'], 
							" ", $codes['code'.$i], (100 * $codes['code'.$i] / 4), 
							$htmlBarGraphColors[$colorNum]);
						$colorNum ++;
						// Go back to the 1st color if we've reached the last color
						if (!isset($htmlBarGraphColors[$colorNum])) { $colorNum = 0; }

						// make note that this perspective was both taken and sought.
						unset($perspectives_taken_but_not_sought[intval($i)]);
					}
				} // END IF: if this code had something marked in la_codes.
			} // END WHILE loop which goes through all codes.
			
			$graph_sought = "</p>";
			if (($numPSought_implicit + $numPSought_explicit) > 0) {
				$graph_sought = ":</p>".$graphPerspectivesSought;
			}

			// Perspectives taken but not sought
			$text_did_not_seek = "";
			if (count($perspectives_taken_but_not_sought) > 0) {
				$text_did_not_seek = $boilerplate['report_ldma_pseeking_didnotseek'].'<ul>';
				foreach ($perspectives_taken_but_not_sought as $p) {
					$text_did_not_seek .= "<li>{$p}</li>";
				}
				$text_did_not_seek .= "</ul>";
			}
			
			$meets_needs = "";	
			if ($row_rsPerspManLevel['ps_man_level_number'] > 0) {
				$meets_needs = "This level of perspective seeking—if applied consistently in the ".
					"workplace—would meet the perspective-seeking needs of most <em>".
					$row_rsPerspManLevel['ps_man_level_name'].
					($row_rsPerspManLevel['ps_man_level_number'] < 3 ? "s" : " managers").".</em> "; 
			}
			
			$reasons_sought = "";
			$sought_codes = array(206, 207, 208, 209);
			$sought_cols = array("perspective_seeking_buyin", "perspectives_seeking_deliberation", 
													 "perspectives_seeking_self_others", "perspective_seeking_situation");
			for ($i = 0; isset($sought_codes[$i]); $i ++) { 
				$text = "";
				if ($codes['code'.$sought_codes[$i]] > 0) {
					$text = lookup($rsLaCodeMenus, "pulldownkey", 
												 $codes['code'.$sought_codes[$i]], $sought_cols[$i]);
				}
				if ($text <> "") { $reasons_sought .= "<li>".$text."</li>"; }
			}
			
			if ($reasons_sought <> "") { 
				$reasons_sought = "<h3>Reasons for seeking perspectives</h3>
				<p>People seek perspectives in decision making situations for any 
					number of reasons. In your performance, you appeared primarily to seek perspectives in 
					order to: </p> <ul>".$reasons_sought."</ul>"; 
			}
			
			$p_limits = "";
			if ($codes['code227'] > 0) {
				$p_limits = "<p>".lookup($rsLaCodeMenus, "pulldownkey", $codes['code227'], 
																 "perspective_limits_of")."</p>";
			}
			
			// Fetch the boilerplate text, swap out the dynamic text tags 
			$text_ps = $boilerplate['report_ldma_pseeking'];
			$text_ps = str_replace("[SOUGHT_EXPLICIT]", $numPSought_explicit, $text_ps);
			//$text_ps = str_replace("[COUNT_EXPLICIT]", $row_rsPerspectiveCounts['explicit'], $text_ps);
			$text_ps = str_replace("[SOUGHT_IMPLICIT]", $numPSought_implicit, $text_ps);
			//$text_ps = str_replace("[COUNT_IMPLICIT]", $row_rsPerspectiveCounts['implicit'], $text_ps);
			$text_ps = str_replace("[DID_NOT_SEEK]", $text_did_not_seek, $text_ps);
			$text_ps = str_replace("[GRAPH_SOUGHT]", $graph_sought, $text_ps);
			$text_ps = str_replace("[SEEKING_SCORE]", $sought_score, $text_ps);
			$text_ps = str_replace("[MEETS_NEEDS]", $meets_needs, $text_ps);
			$text_ps = str_replace("[REASONS_SOUGHT]", $reasons_sought, $text_ps);
			$text_ps = str_replace("[P_LIMITS]", $p_limits, $text_ps);
			// Split the text into sections to be separated by the [PHP] segment of complex code.
      $text_ps = explode("[PHP]", $text_ps);
			
			// Now output the sections of boilerplate text, with the complex code segments in between.
			
			echo linknewtab($text_ps[0]); ?>
      
      <? 
	    	$ceiling = 50; 
	    	if ($taken_score > $ceiling) { $ceiling = $taken_score; }
	      highchart($rsChartResultsByTestTime, 
	        "Perspective taking and seeking by test time", "", 
	        "Test time", "Quality of perspective seeking", "Time ", 
	        array("TEST_TIME", "", "P_TAKEN_QUALITY", "P_SOUGHT_QUALITY", "COMPARISON_PSOUGHT"), 
	        array("Perspective taking", "Perspective seeking", "Average seeking score for your management level"), "", $ceiling, "");
	      
				echo linknewtab($text_ps[1]); 
			?>
      
    	<p>&nbsp;</p>

  	</div>
        



		<? } if (checkModule('perspectives')) { ?>
    <div class="TabbedPanelsContent">							<!-- PERSPECTIVE COORDINATION -->
      <? debrief('report_indiv_debrief_tab_ldma_pcoord'); ?>
      
			<? 
			$text = $boilerplate['report_pcoord'];
			$score = round($codes['code453'], 1);
			
			// description of how you're likely to think now
			$text = str_replace("[COMMENT]", $row_rsLaLdmaComments['perspective_coordination'], $text);
			// description for how you're likely to think next (in a pop-up)
			$whatsnext_link = "";
			$whatsnext_content = "";
			if ($row_rsLaLdmaComments['perspective_coordination_next'] <> "") { 
				$whatsnext_link = "<a class='whats_next_link'>» what's next</a>";
				$next_desc = $row_rsLaLdmaComments['perspective_coordination_next'];
				if (strpos($next_desc, "To further")) { 
					$next_desc = substr($next_desc, 0, strpos($next_desc, "To further"));
				}
				$next_desc = ucfirst($next_desc);
				$activity = $boilerplate['report_indiv_whatsnext_activity_scale_coord'];
				$whatsnext_content .= "<div class='whats_next_content'>
					<h3>Perspective coordination: what's next</h3>
					<p>Test takers scoring at the next level would see the following description:</p>
					<p>{$next_desc}</p>
					{$activity}</div>";
			}
			$text = str_replace("To further", " {$whatsnext_link}</p><p>To further", $text);
			$text = str_replace("[WHATS_NEXT]", $whatsnext_content, $text);
			$text = str_replace("[SCORE]", $score, $text); // score added to WHATSNEXT too.
			echo linknewtab($text); ?>
      
      <? 	
	      highchart($rsChartResultsByTestTime, 
	        "Perspective coordination by test time", "", 
	        "Test time", "Perspective coordination score", "Time ", 
	        array("TEST_TIME", "", "P_COORD_SCORE", "COMPARISON_PCOORD"), 
	        array("Your score", "Average for your management level"), 
	        0, 6, "");
      ?> &nbsp;
          
    </div>
    
    
    <? } if (checkModule('perspectives')) { ?>
    <div class="TabbedPanelsContent">							<!-- COLLABORATIVE CAPACITY -->
      <? debrief('report_indiv_debrief_tab_ldma_collab'); ?>
      
			<? 
			$text = $boilerplate['report_collab'];
			$score = round($codes['code456'], 1);
			
			// description of how you're likely to think now
			$text = str_replace("[COMMENT]", $row_rsLaLdmaComments['collab_capacity'], $text);
			// description for how you're likely to think next (in a pop-up)
			$whatsnext_link = "";
			$whatsnext_content = "";
			if ($row_rsLaLdmaComments['collab_capacity_next'] <> "") { 
				$whatsnext_link = "<a class='whats_next_link'>» what's next</a>";
				$next_desc = $row_rsLaLdmaComments['collab_capacity_next'];
				if (strpos($next_desc, "To further")) {
					$next_desc = substr($next_desc, 0, strpos($next_desc, "To further"));
				}
				$activity = $boilerplate['report_indiv_whatsnext_activity_scale_collab'];
				$whatsnext_content .= "<div class='whats_next_content'>
					<h3>Collaborative capacity: what's next</h3>
					<p>Test takers scoring at the next level would see the following description:</p>
					<p>Your score suggests that your {$next_desc}</p>
					{$activity}</div>";
			}
			$text = str_replace("To further", " {$whatsnext_link}</p><p>To further", $text);
			$text = str_replace("[WHATS_NEXT]", $whatsnext_content, $text);
			$text = str_replace("[SCORE]", $score, $text); // score added to WHATSNEXT too.
			echo linknewtab($text); ?>
      
  
      <?

	      highchart($rsChartResultsByTestTime, 
	        "Collaborative capacity by test time", "", 
	        "Test time", "Collaborative capacity score", "Time ", 
	        array("TEST_TIME", "", "COLLAB_SCORE", "COMPARISON_COLLAB"), 
	        array("Your score", "Average for your management level"), 
	        0, 6, "");

      ?> &nbsp;
          
    </div>
        
        
				
		<? } if (checkModule('context')) { ?>
    <div class="TabbedPanelsContent">												<!-- CONTEXTUAL THINKING -->
      <? debrief('report_indiv_debrief_tab_ldma_context'); ?>
      
			<? 
			$text = $boilerplate['report_context']; 
			$score = round($codes['code454'], 1);
			
			// description of how you're likely to think now 
			$text = str_replace("[COMMENT]", $row_rsLaLdmaComments['contextual_thinking'], $text);
			// description for how you're likely to think next (in a pop-up) 
			$whatsnext_link = ""; 
			$whatsnext_content = ""; 
			if ($row_rsLaLdmaComments['contextual_thinking_next'] <> "") { 
				$whatsnext_link = "<a class='whats_next_link'>» what's next</a>";
				$next_desc = $row_rsLaLdmaComments['contextual_thinking_next'];
				if (strpos($next_desc, "To further")) {
					$next_desc = substr($next_desc, 0, strpos($next_desc, "To further"));
				}
				$activity = $boilerplate['report_indiv_whatsnext_activity_scale_context'];
				$whatsnext_content .= "<div class='whats_next_content'>
					<h3>Contextual thinking: what's next</h3>
					<p>Test takers scoring at the next level would see the following description:</p>
					<p>You are likely to {$next_desc}</p>
					{$activity}</div>";
			}
			$text = str_replace("To further", " {$whatsnext_link}</p><p>To further", $text);
			$text = str_replace("[WHATS_NEXT]", $whatsnext_content, $text);
			$text = str_replace("[SCORE]", $score, $text); // score added to WHATSNEXT too.
			echo linknewtab($text); ?>
      
      <?

	      highchart($rsChartResultsByTestTime, 
	        "Contextual thinking by test time", "", 
	        "Test time", "Quality of contextual thinking", "Time ", 
	        array("TEST_TIME", "", "CONTEXT_SCORE", "COMPARISON_CONTEXT"), 
	        array("Your score", "Average for your management level"), 
	        0, 7, "");

      ?> &nbsp;
        
    
    </div>
        
		<? } if (checkModule('decision_making')) { ?>
    <div class="TabbedPanelsContent">							<!-- DECISION MAKING PROCESS -->
      <? debrief('report_indiv_debrief_tab_ldma_dmprocess'); ?>
      
			<? 
			$text = $boilerplate['report_dmprocess'];
			$score = round($codes['code455'], 1);
			
			// description of how you're likely to think now
			$text = str_replace("[COMMENT]", $row_rsLaLdmaComments['dm_process'], $text);
			// description for how you're likely to think next (in a pop-up)
			$whatsnext_link = "";
			$whatsnext_content = "";
			if ($row_rsLaLdmaComments['dm_process_next'] <> "") { 
				$whatsnext_link = "<a class='whats_next_link'>» what's next</a>";
				$next_desc = $row_rsLaLdmaComments['dm_process_next'];
				if (strpos($next_desc, "To further")) {
					$next_desc = substr($next_desc, 0, strpos($next_desc, "To further"));
				}
				$activity = $boilerplate['report_indiv_whatsnext_activity_scale_dmprocess'];
				$whatsnext_content .= "<div class='whats_next_content'>
					<h3>Decision making: what's next</h3>
					<p>Test takers scoring at the next level would see the following description:</p>
					<p>You are likely to {$next_desc}</p>
					{$activity}</div>";
			}
			$text = str_replace("To further", " {$whatsnext_link}</p><p>To further", $text);
			$text = str_replace("[WHATS_NEXT]", $whatsnext_content, $text);
			$text = str_replace("[SCORE]", $score, $text); // score added to WHATSNEXT too.
			echo linknewtab($text); ?>
      
			<?

				highchart($rsChartResultsByTestTime, 
					"Decision-making process by test time", "", 
					"Test time", "Quality of decision making", "Time ", 
					array("TEST_TIME", "", "DM_SCORE", "COMPARISON_DMPROCESS"), 
	        array("Your score", "Average for your management level"), 
	        0, 7, "");

			?> &nbsp;
          
    </div>
		
    
    
		<? } if (checkModule('argumentation')) { ?>
      <div class="TabbedPanelsContent">							<!-- ARGUMENTATION -->
      	<? debrief('report_indiv_debrief_tab_argumentation'); ?>
        
        <?	 // Prepare argumentation dynamic text
		
				// feedback on English intelligibility
				$comments_english = "";
				if ($codes['argumentation_english'] > 0) {
					$comments_english = "<p>".$row_rsArgumentation['english_infer']." ".
															 $row_rsArgumentation['english_implication']."</p>";
				}
				// prepare comments on the quality of each argumentation aspect
				$comments_quality_array = array();
				$arg_aspects = array("probe", "framing", "clarity", "fragment", "persuasiveness");
				// Omitted from the P: "relevance_scenario", "repetitive", "on_point", "conciseness", "jargon", 
				for ($i = 0; isset($arg_aspects[$i]); $i ++) { 
					$comments_quality_array[] = lookup($rsArgumentationAll, "argumentationkey", 
							$codes['argumentation_'.$arg_aspects[$i]], $arg_aspects[$i]);
				}
				$i = count($comments_quality_array);
				if ($i > 1) { $comments_quality_array[$i-2] .= " and "; }
				$comments_quality = implode(" ", $comments_quality_array);
				// $comments_quality = substr($comments, 0, strlen($comments) - 1);
				if (!strpos($comments_quality, '.)')) { $comments_quality .= '.'; }
				$comments_quality = str_replace('..', '.', $comments_quality);
				
				// ARGUMENTATION BAR GRAPHS 
				// for this test time
				$bargraph_thistime = "";
				// Excluded: relevance_scenario, repetitive, on-point, conciseness, jargon
				$arg_aspects = array("probe", "framing", "clarity", "fragment", "persuasiveness");
				$i = 0;
				
				// For each category of argumentation rating...
				for ($count = 0; isset($arg_aspects[$count]); $count ++) {
					// if that rating has a valid result...
					if ($codes["argumentation_".$arg_aspects[$count]] > 0) {
						
						// Decide what to call this row...
						$label = lookup($rsArgumentationAll, "argumentationkey", 9, $arg_aspects[$count]); 
						// Calculate length of this row...
						$rating = (100 * $codes["argumentation_".$arg_aspects[$count]] / 5);
						// decide what color to use...
						$color = $htmlBarGraphColors[$i];
						if (isset($chart_colors[$instrument_id_base]) AND $chart_colors[$instrument_id_base] <> "") {	
							$color = explode(" ", $chart_colors[$instrument_id_base]);
							$color = $color[0]; 
						}
						
						// topher("Color: ".$color);
						// Draw the row. (See the function code in the include - it's short and sweet.)
						$bargraph_thistime .= htmlBarGraphRow($label, " ", 
							round($codes["argumentation_".$arg_aspects[$count]]), $rating, $color); 
					}
				}
				
				$text_arg = $boilerplate['report_argumentation'];
				if ($instrument_id == "SMA" OR $instrument_id == "SMS" OR $instrument_id == "SMJ") { 
					$text_arg = $boilerplate['report_sm_argumentation']; 
				} else if ($instrument_id == "LIMA") { 
					$text_arg = $boilerplate['report_argumentation_lima']; 
				}
				
				// swap the dynamic text into the tags in the boilerplate
				$text_arg = str_replace("[COMMENTS_QUALITY]", $comments_quality, $text_arg);
				$text_arg = str_replace("[COMMENTS_ENGLISH]", $comments_english, $text_arg);
				$text_arg = str_replace("[BARGRAPH_THISTIME]", $bargraph_thistime, $text_arg);
				
				$text_arg = str_replace("[ARG_OVERALL]", 
											round($codes['argumentation_overall'] * 10), $text_arg);
				$text_arg = str_replace("[ARG_%]", 
											round($codes['argumentation_overall'] * 20), $text_arg);
				$text_arg = str_replace("[ARG_SCALE_MECHANICS]", 
											round($codes['argumentation_scale_mechanics'] * 10), $text_arg);
				$text_arg = str_replace("[ARG_MECHANICS_%]", 
											round($codes['argumentation_scale_mechanics'] * 20), $text_arg);
				
				$text_arg = str_replace("[IMPLICATION]", $row_rsArgumentation['overall_implication']." ".
											$row_rsArgumentation['overall_infer'], $text_arg);
				$text_arg = str_replace("[COMMENTS_VOCAB]", $row_rsArgumentation['vocabularycomment'], $text_arg);
				$text_arg = str_replace("[INSTRUMENT]", $instrument_id_name, $text_arg);
				
				// split the text into 3 pieces, separated by 2 sections of complex HTML
				$text_arg = explode("[PHP]", $text_arg);
				
				// Boilerplate is hidden if this test time wasn't coded for argumentation.
				if ($codes['coded_arg_1'] == 0) { $text_arg = array("", "", "", "", ""); }
				
				// now print out the boilerplate with those HTML / PHP sections inbetween.
				
				echo linknewtab($text_arg[0]);
				
				if ($totalRows_rsChartResultsByTestTime > 1) { ?>
			
					<div id="CollapsiblePanel1" class="CollapsiblePanel">
						<div class="CollapsiblePanelTab">
							THE QUALITY OF YOUR ARGUMENTATION BY TEST TIME (click to view)
						</div>
						<div class="CollapsiblePanelContent">
						
							<? 
							
							// ARGUMENTATION BAR GRAPHS OVER TIME
							// pulls from a special recordset with each time of test taken.
							
							// Excluded: relevance_scenario, repetitive, on-point, conciseness, jargon
							$arg_aspects = array("probe", "framing", "clarity", "fragment", "persuasiveness");
			
							// For each category of argumentation rating...
							for ($count = 0; isset($arg_aspects[$count]); $count ++) {
								// if that rating has a valid result...
								if ($row_rsLaDataOverTime["argumentation_".$arg_aspects[$count]] > 0) {
									$i = 0;
									// Loop through each test time..
									do { 
										// For the conciseness counter, show the score for concise_overly if one is present.
										if ($arg_aspects[$count] == "conciseness" AND 
												$row_rsLaDataOverTime["argumentation_concise_overly"] > 0) {
											$row_rsLaDataOverTime["argumentation_conciseness"] = 
												$row_rsLaDataOverTime["argumentation_concise_overly"];
										}
										// Give a label to this row, if it's the first row for this aspect
										$label = "";
										if ($i == 0 ) {
											$label = lookup($rsArgumentationAll, "argumentationkey", 9, $arg_aspects[$count]);
										}
										
										// Calculate length of this row...
										$rating = (100 * $row_rsLaDataOverTime["argumentation_".$arg_aspects[$count]] / 5);
										$value = round($row_rsLaDataOverTime["argumentation_".$arg_aspects[$count]]);
										// Draw the row. (IF that test time was coded for arg)
										if ($value > 0) { 
											echo htmlBarGraphRow($label, "T ".$row_rsLaDataOverTime['test_time'], 
																 $value, $rating, $htmlBarGraphColors[$i]); 
										}
										$i ++;
									} while ($row_rsLaDataOverTime = mysql_fetch_assoc($rsLaDataOverTime));
									
									// Reset the recordset so that we can look in the next category
									if (mysql_num_rows($rsLaDataOverTime) > 0) 
									{ mysql_data_seek($rsLaDataOverTime, 0);
										$row_rsLaDataOverTime = mysql_fetch_assoc($rsLaDataOverTime); 
									}
								}
								
								// Blank separator: one vertical bar-height ?>
								<table class="TableBarGraph"><tr><th>&nbsp;</th></tr></table>
								<? 
							} // close the FOR loop ?>
						</div>
					</div>
				
					<script type="text/javascript">
						var CollapsiblePanel1 = new Spry.Widget.CollapsiblePanel("CollapsiblePanel1"<? 
						// Have to manually set each collapsible panel to be open by default in print view. 
						if ($printable) {
							?>, {contentIsOpen:true}<?
						} ?>);
					</script>
					
					<? 
				} // endif: if the arg-by-test-time collapsible panel should be shown
				
				
				if ($codes['argumentation_scale_mechanics'] > 0) {
					
					echo linknewtab($text_arg[1]);
					
					highchart($rsChartResultsByTestTime, "Argumentation scores by test time", "", 
								"Test time", "Argument quality (%)", "Time ", 
								array("TEST_TIME", "", "arg_persuasiveness", "arg_probe", "arg_clarity", 
											"arg_fragment", "arg_framing"), 
								array("Persuasiveness", "Answering questions", "Clarity", "Fragmentation", "Framing"), 
								0, 102, "", "line");
					
					echo linknewtab($text_arg[2]);
					
					highchart($rsChartResultsByTestTime, "Mechanics scores by test time", "", 
								"Test time", "Mechanics quality (%)", "Time ", 
								array("TEST_TIME", "", "arg_spelling", "arg_capitalization", "arg_punctuation", 
											"arg_other_grammar"), 
								array("Spelling", "Capitalization", "Punctuation", "Other grammar"), 
								0, 102, "", "line");
					/*
					highchart($rsChartResultsByTestTime, "Mechanics score by test time", "", 
								"Test time", "Mechanics quality (%)", "Time ", 
								array("TEST_TIME", "", "argumentation_scale_mechanics"), "", "", 100);
					*/
				} else {
					
					echo linknewtab($text_arg[1]);
					
					highchart($rsChartResultsByTestTime, "Argumentation scores by test time", "", 
								"Test time", "Argument quality (%)", "Time ", 
								array("TEST_TIME", "", "arg_persuasiveness", "arg_probe", "arg_clarity", 
											"arg_fragment", "arg_framing"), 
								array("Persuasiveness", "Answering questions", "Clarity", "Fragmentation", "Framing"), 
								0, 102, "", "line");
					
					echo linknewtab($text_arg[2]);
					
				}
				
				if (isset($text_arg[3])) { echo linknewtab($text_arg[3]); }
				
				?>
    
      </div>
      
      
      
			<? } if (checkModule('implicit_explicit')) { ?>
      <div class="TabbedPanelsContent">							<!-- IMPLICIT AND EXPLICIT KNOWLEDGE -->
      	<? debrief('report_indiv_debrief_tab_implicit_explicit'); ?>
        
				<? echo $boilerplate['report_implicit_explicit']; ?>
            
      </div>
  		
  		
      <? } if (checkModule('levels_tasks')) { ?>
      <div class="TabbedPanelsContent">							<!-- LEVELS AND TASKS -->
        
				<?
        $text = explode("[CHART]", $boilerplate['report_levelstasks']);
        echo linknewtab($text[0]);
        ?>
      
        <? 
        highchart($rsChartOldLect, "Lectical scores by management level", 
          "Original data from the 2002-2006 NSA study", 
          "Management level", "Lectical score", "", 
          array("MAN_LEVEL", "N", "LASNUMBER"), "", 10, 14, "https://www.devtestservice.org/images/backgrounds/la_chart_bg_manlevel_task_demands.png", 
          "column_small_left"); ?>
        
        <? echo linknewtab($text[1]); ?>
        
				<? 
        highchart($rsChartLectByManLevel, "Lectical scores by management level", 
          "Our current \"live\" data", 
          "Management level", "Lectical score", "", 
          array("MAN_LEVEL", "N", "LASNUMBER"), "", 10, 14, "https://www.devtestservice.org/images/backgrounds/la_chart_bg_manlevel_task_demands.png",
          "column_small_right"); ?>
          
       	<? echo linknewtab($text[2]); ?>  
        
        <p>&nbsp;</p>
        
      </div>
			
      
			
			<? } if (checkModule('management') AND $lasnumber_1 > 0) { ?>
      <div class="TabbedPanelsContent">							<!-- YOUR MANAGEMENT LEVEL -->
        
        <? 
				$text = $boilerplate['report_management_ldma']; 
				
				$title = $row_rsRegistrants['man_level_title'].$lasnumber_1;
				$image = "<img src='/images/manscales/manlas".
					floor($lasnumber_1)."_".floor(10 * ($lasnumber_1 - floor($lasnumber_1))).
					".jpg' alt='Graph of level versus management levels' 
					hspace='0' align='left' class='imageleft2' />";
        // str_replace is used because the text in the la_comments table refers to lasnumber 
				// but doesn't have any other way of mentioning the number within the string. 
				// So all instances of %s are replaced with $lasnumber_1.
				$intro = str_replace("%s", $lasnumber_1, $row_rsLaLdmaComments['ldma_intro_managers']);
				$juxtapose = str_replace("%s", $lasnumber_1, $row_rsManLevelJuxtapose['manleveljuxtapose']);
				
        $text = str_replace("[IMAGE]", $image, $text);
        $text = str_replace("[TITLE]", $title, $text);
        $text = str_replace("[LDMA_INTRO_MANAGERS]", $intro, $text);
        $text = str_replace("[LASNUMBER]", $lasnumber_1, $text);
				$text = str_replace("[MANLEVEL]", $row_rsRegistrants['man_level'], $text);
				$text = str_replace("[MANLEVEL_COMMENT]", $row_rsRegistrants['man_level_comment'], $text);
				$text = str_replace("[JUXTAPOSE]", $juxtapose, $text);
				
				echo linknewtab($text); ?>
        
      </div>
        
			<? } if (checkModule('lsua_survey') AND 
                  ($totalRows_rsOptimism > 0 OR $totalRows_rsCharacter > 0)) { ?>
      <div class="TabbedPanelsContent">							<!-- SURVEY RESULTS (GENERAL TAB) -->
          
          <h2>Essay results vs. survey results</h2>
          
          <? echo $boilerplate['report_essaysurvey']; ?>
              
        </div>
        
        <? if ($totalRows_rsOptimism > 0) { ?>
        <div class="TabbedPanelsContent">							<!-- OPTIMISM SURVEY RESULTS -->
      		<? debrief('report_indiv_debrief_tab_lsua_optimism'); ?>
          
          <h2>Your optimism survey results</h2>
          
          <p>Your optimism survey score is 
						<? echo linknewtab($row_rsOptimism['optimismaverage']); ?>.</p>
          <h3><strong>Your definition of optimism</strong></h3>
          <p>&quot;<? echo linknewtab($row_rsOptimism['optimismcomment']); ?>&quot;</p>
          
          <? echo $boilerplate['report_dos']; ?>
              
        </div>
        <? } // endif: totalRows > 0 ?>
        
				<? if ($totalRows_rsCharacter > 0) { ?>
        <div class="TabbedPanelsContent">							<!-- CHARACTER SURVEY RESULTS -->
      		<? debrief('report_indiv_debrief_tab_lsua_character'); ?>
          
          <h2>Your character survey results</h2>
                
          <h3>Your definition of character</h3>
          <p>"<? echo linknewtab($row_rsCharacter['charactercomment']); ?>"</p>
          
          <? 
          $bp_character = $boilerplate['report_dcs'];
          $bp_character = str_replace("[INTEGRITY_AVG]", 
																				$row_rsCharacter['integrityaverage'], $bp_character);
          $bp_character = str_replace("[PERSISTENCE_AVG]", 
                                        $row_rsCharacter['persistenceaverage'], $bp_character);
          $bp_character = str_replace("[LEARNER_AVG]", 
																				$row_rsCharacter['learneraverage'], $bp_character);
          $bp_character = str_replace("[CHALLENGE_AVG]", 
																				$row_rsCharacter['challengeaverage'], $bp_character);
          $bp_character = str_replace("[EMOTION_AVG]", 
																				$row_rsCharacter['emotionaverage'], $bp_character);
          echo linknewtab($bp_character);
          ?>
         
        </div>
        <? } // endif: totalRows > 0 ?>
      
      <? } if (checkModule('mistakes')) { ?>
      <div class="TabbedPanelsContent">							<!-- LEARNING AND MISTAKES -->
      	<? debrief('report_indiv_debrief_tab_learning_mistakes'); ?>
        
        <? echo $boilerplate['report_learning_mistakes']; ?>
        <p>&nbsp;</p>
        
      </div>
				
				
        
			<? } if (checkModule('essays')) { ?>
      <div class="TabbedPanelsContent">									<!-- YOUR ESSAYS -->
      	<? debrief('report_indiv_debrief_tab_responses'); ?>
          
				<? $text = $boilerplate['report_essays_intro'];
        if ($instrument_id == "SMJ") { 
          $text = $boilerplate['report_smj_essays'];
        }
        echo $text; ?>
                  
        <? if ($courseAssnTitle <> "") { echo "<h3>Class: ".$courseAssnTitle."</h3>"; } 
        else if ($row_rsEssays['dilemma'] <> "") { ?>
          <h3>The dilemma you responded to:</h3>
          <p><? echo $row_rsEssays['dilemma']; ?></p> <? 
        } ?>
                  
        <? 
        // For each question...
        for ($i = 1; $i <= 7; $i ++) { 
          $probe_name = str_replace("random_lamenus", "", $row_rsEssays['probe_name0'.$i]);
          // If this was a course assignment (like FOLA), display assigned question. 
          // Otherwise, show the la_probes probe.
          if (isset($courseAssnProbe[$i]) AND $courseAssnProbe[$i] <> "") { ?>
            <h3>Question <? echo $i; ?></h3><? 
            echo "<p><em>".$courseAssnProbe[$i]."</em></p>"; 
          } 
          else { ?>
            <p><strong><? echo str_replace(array("<p>", "</p>"), "", $probe_name); 
            if ($row_rsEssays['menu0'.$i] <> "") 
            { 
              if ($probe_name <> "") { echo ": "; }
              echo ucfirst($row_rsEssays['menu0'.$i]); 
            } ?>
            </strong></p> <? 
          } 
          if ($row_rsEssays['probe_desc0'.$i] <> "") { 
            ?> <p><em><? 
							$text = $row_rsEssays['probe_desc0'.$i];
							$text = str_replace(array("<p>", "</p>", "<strong>", "</strong>"), "", $text); 
							echo $text; ?></em></p> <? 
          } 
          // Print the test taker response 
          ?><p><? echo str_replace("\n", "<br>", $row_rsEssays['probe0'.$i]); ?></p><?php 
        } // WHILE loop cycles again for each essay ?>
        
        <p>&nbsp;</p>
      
      </div>
      <?php } // this was the last tabbedPanel section. ?>
        
      </div>
    </div>
    
    <br class="clearfloat" />
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    
    
    
  	<!-- for pop up What's Next boxes -->
    <div id="floating" class="floating">
    	<div id="floating_header" class="floating_header">
        Click and drag here to move this window around the screen.
        <span id="floating_close" class="floating_close">×</span>
      </div>
      <div id="floating_content" class="floating_content"></div>
    </div>
    
    <div id="debrief_window" class="floating box-1">
    	<div id="debrief_window_header" class="floating_header">
        Click and drag here to move this window around the screen.
        <span id="debrief_window_close" class="floating_close">×</span>
      </div>
      <div id="debrief_window_content" class="floating_content"></div>
    </div>
    
    
    <script type="text/javascript">
		var TabbedPanels1 = new Spry.Widget.TabbedPanels("TabbedPanels1");
		</script> 

    <!-- InstanceEndEditable -->
  <!-- end #mainContent --></div>
  <!-- This clearing element should immediately follow the #mainContent div in order to force the #container div to contain all child floats --><br class="clearfloat" />
  <!-- end #container -->
</div>
</body>
<!-- InstanceEnd --></html>
<?php

/**** mysql_free_result is not needed at the end of these pages. 
Memory is automatically freed up at the end of script execution. */

?>
